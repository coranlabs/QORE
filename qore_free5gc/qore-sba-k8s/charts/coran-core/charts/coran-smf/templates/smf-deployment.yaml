{{- with .Values.smf }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "coran-smf.fullname" $ }}-{{ .name }}
  labels:
    {{- include "coran-smf.labels" $ | nindent 4 }}
    project: {{ $.Values.global.projectName }}
    nf: {{ .name }}
spec:
  {{- if not .autoscaling.enabled }}
  replicas: {{ .replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "coran-smf.selectorLabels" $ | nindent 6 }}
      project: {{ $.Values.global.projectName }}
      nf: {{ .name }}
  template:
    metadata:
      annotations:
        {{- include "coran-smf.smfAnnotations" $ | nindent 8 }}
        {{- if and $.Values.isPfcpNeeded $.Values.global.n4network.enabled}}
        k8s.v1.cni.cncf.io/networks: '[
            { "name": "{{ $.Values.global.n4network.name }}-{{ include "coran-smf.fullname" $ }}",
              "interface": "n4",
              "ips": [ "{{ $.Values.global.smf.n4if.ipAddress }}/{{ $.Values.global.n4network.cidr }}" ],
              "gateway": [ "{{ $.Values.global.n4network.gatewayIP }}" ]
            }]'
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/smf-configmap.yaml") $ | sha256sum }}
      labels:
        {{- include "coran-smf.selectorLabels" $ | nindent 8 }}
        project: {{ $.Values.global.projectName }}
        nf: {{ .name }}
    spec:
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      # initContainers:
      # - name: wait-nrf
      #   {{- with $.Values.initcontainers.curl }}
      #   image: {{ .registry }}/{{ .image }}:{{ .tag }}
      #   {{- end }}
      #   env:
      #   - name: DEPENDENCIES
      #     value: {{ $.Values.global.sbi.scheme }}://{{ $.Values.global.nrf.service.name }}:{{ $.Values.global.nrf.service.port }}
      #   command: ['sh', '-c', 'set -x; for dependency in $DEPENDENCIES; do while [ $(curl --insecure --connect-timeout 1 -s -o /dev/null -w "%{http_code}" $dependency) -ne 200 ]; do echo waiting for dependencies; sleep 1; done; done;']

      containers:
      - name: {{ .name }}
        image: {{ $.Values.global.smf.image.name }}
        imagePullPolicy: {{ $.Values.global.image.pullPolicy }}
        securityContext:
            {{- toYaml .securityContext | nindent 12 }}
        ports:
        - name: nsmf
          containerPort: {{ .service.port }}
        {{- if $.Values.isPfcpNeeded }}
        - name: n4
          containerPort: 8805
          protocol: UDP
        {{- end }}
        command: ["./smf"]
          #args: ["-c", "../config/smfcfg.yaml", "-u", "../config/uerouting.yaml"]
        env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: GIN_MODE
            value: release
        volumeMounts:
        - mountPath: /root/cert
          name: cert-storage
        - mountPath: {{ .volume.mount }}
          name: {{ include "coran-smf.fullname" $ }}-volume
        resources:
            {{- toYaml .resources | nindent 12 }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      nodeSelector:
        {{- toYaml .nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .affinity | nindent 8 }}
      tolerations:
        {{- toYaml .tolerations | nindent 8 }}

      volumes:
      - name: cert-storage
        persistentVolumeClaim:
          claimName: {{ $.Values.global.persistentVolumeClaim.name }}
      - name: {{ include "coran-smf.fullname" $ }}-volume
        projected:
          sources:
          - configMap:
              name: {{ include "coran-smf.fullname" $ }}-configmap
              items:
              - key: CORAN_SMF.yaml
                path: CORAN_SMF.yaml
              - key: UEROUTING.yaml
                path: UEROUTING.yaml
{{- end }}
