/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

// EllipsoidArc - Ellipsoid Arc.
type EllipsoidArc struct {
	GadShape

	Point GeographicalCoordinates `json:"point"`

	// Indicates value of the inner radius.
	InnerRadius int32 `json:"innerRadius"`

	// Indicates value of uncertainty.
	UncertaintyRadius float32 `json:"uncertaintyRadius"`

	// Indicates value of angle.
	OffsetAngle int32 `json:"offsetAngle"`

	// Indicates value of angle.
	IncludedAngle int32 `json:"includedAngle"`

	// Indicates value of confidence.
	Confidence int32 `json:"confidence"`
}

// AssertEllipsoidArcRequired checks if the required fields are not zero-ed
func AssertEllipsoidArcRequired(obj EllipsoidArc) error {
	elements := map[string]interface{}{
		"point":             obj.Point,
		"innerRadius":       obj.InnerRadius,
		"uncertaintyRadius": obj.UncertaintyRadius,
		"offsetAngle":       obj.OffsetAngle,
		"includedAngle":     obj.IncludedAngle,
		"confidence":        obj.Confidence,
		"shape":             obj.Shape,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertGadShapeRequired(obj.GadShape); err != nil {
		return err
	}

	if err := AssertGeographicalCoordinatesRequired(obj.Point); err != nil {
		return err
	}
	return nil
}

// AssertRecurseEllipsoidArcRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EllipsoidArc (e.g. [][]EllipsoidArc), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEllipsoidArcRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEllipsoidArc, ok := obj.(EllipsoidArc)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEllipsoidArcRequired(aEllipsoidArc)
	})
}
