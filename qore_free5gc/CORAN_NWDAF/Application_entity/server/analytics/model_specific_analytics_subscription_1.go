/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

// SpecificAnalyticsSubscription1 - Represents an existing subscription for a specific type of analytics to a specific NWDAF.
type SpecificAnalyticsSubscription1 struct {
	SubscriptionId string `json:"subscriptionId,omitempty"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	ProducerId string `json:"producerId,omitempty"`

	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"  set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or \"set<SetID>.  <NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with <MCC> encoded as defined in clause 5.4.2  (\"Mcc\" data type definition) <MNC> encoded as defined in clause 5.4.2 (\"Mnc\" data type  definition) <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but  with lower case characters <Set ID> encoded as a string of characters consisting of alphabetic  characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end with either an  alphabetic character or a digit.
	ProducerSetId string `json:"producerSetId,omitempty"`

	NwdafEvSub *NnwdafEventsSubscription `json:"nwdafEvSub,omitempty"`
}

// AssertSpecificAnalyticsSubscription1Required checks if the required fields are not zero-ed
func AssertSpecificAnalyticsSubscription1Required(obj SpecificAnalyticsSubscription1) error {
	if err := AssertNnwdafEventsSubscriptionRequired(*obj.NwdafEvSub); err != nil {
		return err
	}
	return nil
}

// AssertRecurseSpecificAnalyticsSubscription1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SpecificAnalyticsSubscription1 (e.g. [][]SpecificAnalyticsSubscription1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSpecificAnalyticsSubscription1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSpecificAnalyticsSubscription1, ok := obj.(SpecificAnalyticsSubscription1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSpecificAnalyticsSubscription1Required(aSpecificAnalyticsSubscription1)
	})
}
