/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

import (
	"time"
)

// EventNotification - Represents a notification on events that occurred.
type EventNotification struct {
	Event NwdafEvent `json:"event"`

	// string with format 'date-time' as defined in OpenAPI.
	Start time.Time `json:"start,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	Expiry time.Time `json:"expiry,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	TimeStampGen time.Time `json:"timeStampGen,omitempty"`

	FailNotifyCode NwdafFailureCode `json:"failNotifyCode,omitempty"`

	// indicating a time in seconds.
	RvWaitTime int32 `json:"rvWaitTime,omitempty"`

	AnaMetaInfo AnalyticsMetadataInfo `json:"anaMetaInfo,omitempty"`

	NfLoadLevelInfos []NfLoadLevelInformation `json:"nfLoadLevelInfos,omitempty"`

	NsiLoadLevelInfos []NsiLoadLevelInfo `json:"nsiLoadLevelInfos,omitempty"`

	SliceLoadLevelInfo SliceLoadLevelInformation `json:"sliceLoadLevelInfo,omitempty"`

	SvcExps []ServiceExperienceInfo `json:"svcExps,omitempty"`

	QosSustainInfos []QosSustainabilityInfo `json:"qosSustainInfos,omitempty"`

	UeComms []UeCommunication `json:"ueComms,omitempty"`

	UeMobs []UeMobility `json:"ueMobs,omitempty"`

	UserDataCongInfos []UserDataCongestionInfo `json:"userDataCongInfos,omitempty"`

	AbnorBehavrs []AbnormalBehaviour `json:"abnorBehavrs,omitempty"`

	NwPerfs []NetworkPerfInfo `json:"nwPerfs,omitempty"`

	DnPerfInfos []DnPerfInfo `json:"dnPerfInfos,omitempty"`

	DisperInfos []DispersionInfo `json:"disperInfos,omitempty"`

	RedTransInfos []RedundantTransmissionExpInfo `json:"redTransInfos,omitempty"`

	WlanInfos []WlanPerformanceInfo `json:"wlanInfos,omitempty"`
}

// AssertEventNotificationRequired checks if the required fields are not zero-ed
func AssertEventNotificationRequired(obj EventNotification) error {
	elements := map[string]interface{}{
		"event": obj.Event,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNwdafEventRequired(obj.Event); err != nil {
		return err
	}
	if err := AssertNwdafFailureCodeRequired(obj.FailNotifyCode); err != nil {
		return err
	}
	if err := AssertAnalyticsMetadataInfoRequired(obj.AnaMetaInfo); err != nil {
		return err
	}
	for _, el := range obj.NfLoadLevelInfos {
		if err := AssertNfLoadLevelInformationRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NsiLoadLevelInfos {
		if err := AssertNsiLoadLevelInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSliceLoadLevelInformationRequired(obj.SliceLoadLevelInfo); err != nil {
		return err
	}
	for _, el := range obj.SvcExps {
		if err := AssertServiceExperienceInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.QosSustainInfos {
		if err := AssertQosSustainabilityInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeComms {
		if err := AssertUeCommunicationRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeMobs {
		if err := AssertUeMobilityRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UserDataCongInfos {
		if err := AssertUserDataCongestionInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AbnorBehavrs {
		if err := AssertAbnormalBehaviourRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NwPerfs {
		if err := AssertNetworkPerfInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DnPerfInfos {
		if err := AssertDnPerfInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DisperInfos {
		if err := AssertDispersionInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RedTransInfos {
		if err := AssertRedundantTransmissionExpInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.WlanInfos {
		if err := AssertWlanPerformanceInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseEventNotificationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EventNotification (e.g. [][]EventNotification), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEventNotificationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEventNotification, ok := obj.(EventNotification)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEventNotificationRequired(aEventNotification)
	})
}
