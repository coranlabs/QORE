/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// DispersionCollection1 - Dispersion collection per UE location or per slice.
type DispersionCollection1 struct {
	UeLoc UserLocation `json:"ueLoc,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	Supis []string `json:"supis,omitempty"`

	Gpsis []string `json:"gpsis,omitempty"`

	AppVolumes []ApplicationVolume1 `json:"appVolumes,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	DisperAmount int32 `json:"disperAmount,omitempty"`

	DisperClass DispersionClass `json:"disperClass,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	UsageRank int32 `json:"usageRank,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
	PercentileRank int32 `json:"percentileRank,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
	UeRatio int32 `json:"ueRatio,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertDispersionCollection1Required checks if the required fields are not zero-ed
func AssertDispersionCollection1Required(obj DispersionCollection1) error {
	if err := AssertUserLocationRequired(obj.UeLoc); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	for _, el := range obj.AppVolumes {
		if err := AssertApplicationVolume1Required(el); err != nil {
			return err
		}
	}
	if err := AssertDispersionClassRequired(obj.DisperClass); err != nil {
		return err
	}
	return nil
}

// AssertRecurseDispersionCollection1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of DispersionCollection1 (e.g. [][]DispersionCollection1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDispersionCollection1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDispersionCollection1, ok := obj.(DispersionCollection1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDispersionCollection1Required(aDispersionCollection1)
	})
}
