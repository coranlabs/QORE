/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// FlowInfo - Represents flow information.
type FlowInfo struct {

	// Indicates the IP flow.
	FlowId int32 `json:"flowId"`

	// Indicates the packet filters of the IP flow. Refer to subclause 5.3.8 of 3GPP TS 29.214 for encoding. It shall contain UL and/or DL IP flow description.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`
}

// AssertFlowInfoRequired checks if the required fields are not zero-ed
func AssertFlowInfoRequired(obj FlowInfo) error {
	elements := map[string]interface{}{
		"flowId": obj.FlowId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseFlowInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FlowInfo (e.g. [][]FlowInfo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFlowInfoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFlowInfo, ok := obj.(FlowInfo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFlowInfoRequired(aFlowInfo)
	})
}
