/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// ApplicationVolume1 - Application data volume per Application Id.
type ApplicationVolume1 struct {

	// String providing an application identifier.
	AppId string `json:"appId"`

	// Unsigned integer identifying a volume in units of bytes.
	AppVolume int64 `json:"appVolume"`
}

// AssertApplicationVolume1Required checks if the required fields are not zero-ed
func AssertApplicationVolume1Required(obj ApplicationVolume1) error {
	elements := map[string]interface{}{
		"appId":     obj.AppId,
		"appVolume": obj.AppVolume,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseApplicationVolume1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ApplicationVolume1 (e.g. [][]ApplicationVolume1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseApplicationVolume1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aApplicationVolume1, ok := obj.(ApplicationVolume1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertApplicationVolume1Required(aApplicationVolume1)
	})
}
