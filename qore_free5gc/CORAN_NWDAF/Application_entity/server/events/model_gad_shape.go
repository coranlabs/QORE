/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// GadShape - Common base type for GAD shapes.
type GadShape struct {
	Shape SupportedGadShapes `json:"shape"`
}

// AssertGadShapeRequired checks if the required fields are not zero-ed
func AssertGadShapeRequired(obj GadShape) error {
	elements := map[string]interface{}{
		"shape": obj.Shape,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSupportedGadShapesRequired(obj.Shape); err != nil {
		return err
	}
	return nil
}

// AssertRecurseGadShapeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GadShape (e.g. [][]GadShape), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGadShapeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGadShape, ok := obj.(GadShape)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGadShapeRequired(aGadShape)
	})
}
