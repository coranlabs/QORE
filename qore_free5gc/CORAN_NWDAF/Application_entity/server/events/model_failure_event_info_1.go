/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// FailureEventInfo1 - Contains information on the event for which the subscription is not successful.
type FailureEventInfo1 struct {
	Event NwdafEvent `json:"event"`

	FailureCode NwdafFailureCode `json:"failureCode"`
}

// AssertFailureEventInfo1Required checks if the required fields are not zero-ed
func AssertFailureEventInfo1Required(obj FailureEventInfo1) error {
	elements := map[string]interface{}{
		"event":       obj.Event,
		"failureCode": obj.FailureCode,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNwdafEventRequired(obj.Event); err != nil {
		return err
	}
	if err := AssertNwdafFailureCodeRequired(obj.FailureCode); err != nil {
		return err
	}
	return nil
}

// AssertRecurseFailureEventInfo1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FailureEventInfo1 (e.g. [][]FailureEventInfo1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFailureEventInfo1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFailureEventInfo1, ok := obj.(FailureEventInfo1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFailureEventInfo1Required(aFailureEventInfo1)
	})
}
