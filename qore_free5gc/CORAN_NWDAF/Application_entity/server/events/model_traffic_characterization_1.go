/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// TrafficCharacterization1 - Identifies the detailed traffic characterization.
type TrafficCharacterization1 struct {

	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN with both the Network Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots (e.g. \"Label1.Label2.Label3\").
	Dnn string `json:"dnn,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	// String providing an application identifier.
	AppId string `json:"appId,omitempty"`

	FDescs []IpEthFlowDescription1 `json:"fDescs,omitempty"`

	// Unsigned integer identifying a volume in units of bytes.
	UlVol int64 `json:"ulVol,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	UlVolVariance float32 `json:"ulVolVariance,omitempty"`

	// Unsigned integer identifying a volume in units of bytes.
	DlVol int64 `json:"dlVol,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	DlVolVariance float32 `json:"dlVolVariance,omitempty"`
}

// AssertTrafficCharacterization1Required checks if the required fields are not zero-ed
func AssertTrafficCharacterization1Required(obj TrafficCharacterization1) error {
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	for _, el := range obj.FDescs {
		if err := AssertIpEthFlowDescription1Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseTrafficCharacterization1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TrafficCharacterization1 (e.g. [][]TrafficCharacterization1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTrafficCharacterization1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTrafficCharacterization1, ok := obj.(TrafficCharacterization1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTrafficCharacterization1Required(aTrafficCharacterization1)
	})
}
