/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

type PolygonAllOf struct {

	// List of points.
	PointList []GeographicalCoordinates `json:"pointList"`
}

// AssertPolygonAllOfRequired checks if the required fields are not zero-ed
func AssertPolygonAllOfRequired(obj PolygonAllOf) error {
	elements := map[string]interface{}{
		"pointList": obj.PointList,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.PointList {
		if err := AssertGeographicalCoordinatesRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecursePolygonAllOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PolygonAllOf (e.g. [][]PolygonAllOf), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePolygonAllOfRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPolygonAllOf, ok := obj.(PolygonAllOf)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPolygonAllOfRequired(aPolygonAllOf)
	})
}
