/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// PerfData1 - Represents DN performance data.
type PerfData1 struct {

	// String representing a bit rate prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".
	AvgTrafficRate string `json:"avgTrafficRate,omitempty"`

	// String representing a bit rate prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".
	MaxTrafficRate string `json:"maxTrafficRate,omitempty"`

	// Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.
	AvePacketDelay int32 `json:"avePacketDelay,omitempty"`

	// Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.
	MaxPacketDelay int32 `json:"maxPacketDelay,omitempty"`

	// Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent.
	AvgPacketLossRate int32 `json:"avgPacketLossRate,omitempty"`
}

// AssertPerfData1Required checks if the required fields are not zero-ed
func AssertPerfData1Required(obj PerfData1) error {
	return nil
}

// AssertRecursePerfData1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PerfData1 (e.g. [][]PerfData1), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePerfData1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPerfData1, ok := obj.(PerfData1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPerfData1Required(aPerfData1)
	})
}
