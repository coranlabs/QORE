/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// RankingCriterion1 - Indicates the usage ranking criterion between the high, medium and low usage UE.
type RankingCriterion1 struct {

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
	HighBase int32 `json:"highBase"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
	LowBase int32 `json:"lowBase,omitempty"`
}

// AssertRankingCriterion1Required checks if the required fields are not zero-ed
func AssertRankingCriterion1Required(obj RankingCriterion1) error {
	elements := map[string]interface{}{
		"highBase": obj.HighBase,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseRankingCriterion1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RankingCriterion1 (e.g. [][]RankingCriterion1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRankingCriterion1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRankingCriterion1, ok := obj.(RankingCriterion1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRankingCriterion1Required(aRankingCriterion1)
	})
}
