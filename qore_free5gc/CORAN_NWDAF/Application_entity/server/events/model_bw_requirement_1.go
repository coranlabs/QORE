/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// BwRequirement1 - Represents bandwidth requirements.
type BwRequirement1 struct {

	// String providing an application identifier.
	AppId string `json:"appId"`

	// String representing a bit rate prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".
	MarBwDl string `json:"marBwDl,omitempty"`

	// String representing a bit rate prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".
	MarBwUl string `json:"marBwUl,omitempty"`

	// String representing a bit rate prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".
	MirBwDl string `json:"mirBwDl,omitempty"`

	// String representing a bit rate prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".
	MirBwUl string `json:"mirBwUl,omitempty"`
}

// AssertBwRequirement1Required checks if the required fields are not zero-ed
func AssertBwRequirement1Required(obj BwRequirement1) error {
	elements := map[string]interface{}{
		"appId": obj.AppId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseBwRequirement1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of BwRequirement1 (e.g. [][]BwRequirement1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseBwRequirement1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aBwRequirement1, ok := obj.(BwRequirement1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertBwRequirement1Required(aBwRequirement1)
	})
}
