/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// NumberAverage1 - Represents average and variance information.
type NumberAverage1 struct {
	Number int32 `json:"number"`

	// string with format 'float' as defined in OpenAPI.
	Variance float32 `json:"variance"`
}

// AssertNumberAverage1Required checks if the required fields are not zero-ed
func AssertNumberAverage1Required(obj NumberAverage1) error {
	elements := map[string]interface{}{
		"number":   obj.Number,
		"variance": obj.Variance,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseNumberAverage1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NumberAverage1 (e.g. [][]NumberAverage1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseNumberAverage1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNumberAverage1, ok := obj.(NumberAverage1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertNumberAverage1Required(aNumberAverage1)
	})
}
