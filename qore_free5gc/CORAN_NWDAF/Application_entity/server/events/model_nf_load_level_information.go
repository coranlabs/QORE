/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// NfLoadLevelInformation - Represents load level information of a given NF instance.
type NfLoadLevelInformation struct {
	NfType NfType `json:"nfType"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	NfInstanceId string `json:"nfInstanceId"`

	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"  set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or \"set<SetID>.  <NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with <MCC> encoded as defined in clause 5.4.2  (\"Mcc\" data type definition) <MNC> encoded as defined in clause 5.4.2 (\"Mnc\" data type  definition) <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but  with lower case characters <Set ID> encoded as a string of characters consisting of alphabetic  characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end with either an  alphabetic character or a digit.
	NfSetId string `json:"nfSetId,omitempty"`

	NfStatus NfStatus `json:"nfStatus,omitempty"`

	NfCpuUsage int32 `json:"nfCpuUsage,omitempty"`

	NfMemoryUsage int32 `json:"nfMemoryUsage,omitempty"`

	NfStorageUsage int32 `json:"nfStorageUsage,omitempty"`

	NfLoadLevelAverage int32 `json:"nfLoadLevelAverage,omitempty"`

	NfLoadLevelpeak int32 `json:"nfLoadLevelpeak,omitempty"`

	NfLoadAvgInAoi int32 `json:"nfLoadAvgInAoi,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertNfLoadLevelInformationRequired checks if the required fields are not zero-ed
func AssertNfLoadLevelInformationRequired(obj NfLoadLevelInformation) error {
	elements := map[string]interface{}{
		"nfType":       obj.NfType,
		"nfInstanceId": obj.NfInstanceId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNfTypeRequired(obj.NfType); err != nil {
		return err
	}
	if err := AssertNfStatusRequired(obj.NfStatus); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	return nil
}

// AssertRecurseNfLoadLevelInformationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NfLoadLevelInformation (e.g. [][]NfLoadLevelInformation), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseNfLoadLevelInformationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNfLoadLevelInformation, ok := obj.(NfLoadLevelInformation)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertNfLoadLevelInformationRequired(aNfLoadLevelInformation)
	})
}
