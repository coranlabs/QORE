/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// SliceLoadLevelInformation1 - Contains load level information applicable for one or several slices.
type SliceLoadLevelInformation1 struct {

	// Load level information of the network slice and the optionally associated network slice instance.
	LoadLevelInformation int32 `json:"loadLevelInformation"`

	// Identification(s) of network slice to which the subscription applies.
	Snssais []Snssai `json:"snssais"`

	NumOfUes NumberAverage1 `json:"numOfUes,omitempty"`

	NumOfPduSess NumberAverage1 `json:"numOfPduSess,omitempty"`

	ExceedLoadLevelThrInd bool `json:"exceedLoadLevelThrInd,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`
}

// AssertSliceLoadLevelInformation1Required checks if the required fields are not zero-ed
func AssertSliceLoadLevelInformation1Required(obj SliceLoadLevelInformation1) error {
	elements := map[string]interface{}{
		"loadLevelInformation": obj.LoadLevelInformation,
		"snssais":              obj.Snssais,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Snssais {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNumberAverage1Required(obj.NumOfUes); err != nil {
		return err
	}
	if err := AssertNumberAverage1Required(obj.NumOfPduSess); err != nil {
		return err
	}
	return nil
}

// AssertRecurseSliceLoadLevelInformation1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SliceLoadLevelInformation1 (e.g. [][]SliceLoadLevelInformation1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSliceLoadLevelInformation1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSliceLoadLevelInformation1, ok := obj.(SliceLoadLevelInformation1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSliceLoadLevelInformation1Required(aSliceLoadLevelInformation1)
	})
}
