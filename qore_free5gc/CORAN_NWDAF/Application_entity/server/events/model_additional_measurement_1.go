/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

import (
	"time"
)

// AdditionalMeasurement1 - Represents additional measurement information.
type AdditionalMeasurement1 struct {
	UnexpLoc NetworkAreaInfo `json:"unexpLoc,omitempty"`

	UnexpFlowTeps []IpEthFlowDescription1 `json:"unexpFlowTeps,omitempty"`

	UnexpWakes []time.Time `json:"unexpWakes,omitempty"`

	DdosAttack AddressList1 `json:"ddosAttack,omitempty"`

	WrgDest AddressList1 `json:"wrgDest,omitempty"`

	Circums []CircumstanceDescription1 `json:"circums,omitempty"`
}

// AssertAdditionalMeasurement1Required checks if the required fields are not zero-ed
func AssertAdditionalMeasurement1Required(obj AdditionalMeasurement1) error {
	if err := AssertNetworkAreaInfoRequired(obj.UnexpLoc); err != nil {
		return err
	}
	for _, el := range obj.UnexpFlowTeps {
		if err := AssertIpEthFlowDescription1Required(el); err != nil {
			return err
		}
	}
	if err := AssertAddressList1Required(obj.DdosAttack); err != nil {
		return err
	}
	if err := AssertAddressList1Required(obj.WrgDest); err != nil {
		return err
	}
	for _, el := range obj.Circums {
		if err := AssertCircumstanceDescription1Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseAdditionalMeasurement1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AdditionalMeasurement1 (e.g. [][]AdditionalMeasurement1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAdditionalMeasurement1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAdditionalMeasurement1, ok := obj.(AdditionalMeasurement1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAdditionalMeasurement1Required(aAdditionalMeasurement1)
	})
}
