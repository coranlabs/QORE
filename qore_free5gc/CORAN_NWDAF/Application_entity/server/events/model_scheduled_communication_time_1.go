/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// ScheduledCommunicationTime1 - Identifies time and day of the week when the UE is available for communication.
type ScheduledCommunicationTime1 struct {

	// Identifies the day(s) of the week. If absent, it indicates every day of the week.
	DaysOfWeek []int32 `json:"daysOfWeek,omitempty"`

	// String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayStart string `json:"timeOfDayStart,omitempty"`

	// String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayEnd string `json:"timeOfDayEnd,omitempty"`
}

// AssertScheduledCommunicationTime1Required checks if the required fields are not zero-ed
func AssertScheduledCommunicationTime1Required(obj ScheduledCommunicationTime1) error {
	return nil
}

// AssertRecurseScheduledCommunicationTime1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ScheduledCommunicationTime1 (e.g. [][]ScheduledCommunicationTime1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseScheduledCommunicationTime1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aScheduledCommunicationTime1, ok := obj.(ScheduledCommunicationTime1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertScheduledCommunicationTime1Required(aScheduledCommunicationTime1)
	})
}
