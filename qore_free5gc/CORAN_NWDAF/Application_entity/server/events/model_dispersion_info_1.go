/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

import (
	"time"
)

// DispersionInfo1 - Represents the Dispersion information. When subscribed event is \"DISPERSION\", the \"disperInfos\" attribute shall be included.
type DispersionInfo1 struct {

	// string with format 'date-time' as defined in OpenAPI.
	TsStart time.Time `json:"tsStart"`

	// indicating a time in seconds.
	TsDuration int32 `json:"tsDuration"`

	DisperCollects []DispersionCollection1 `json:"disperCollects"`

	DisperType DispersionType `json:"disperType"`
}

// AssertDispersionInfo1Required checks if the required fields are not zero-ed
func AssertDispersionInfo1Required(obj DispersionInfo1) error {
	elements := map[string]interface{}{
		"tsStart":        obj.TsStart,
		"tsDuration":     obj.TsDuration,
		"disperCollects": obj.DisperCollects,
		"disperType":     obj.DisperType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.DisperCollects {
		if err := AssertDispersionCollection1Required(el); err != nil {
			return err
		}
	}
	if err := AssertDispersionTypeRequired(obj.DisperType); err != nil {
		return err
	}
	return nil
}

// AssertRecurseDispersionInfo1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of DispersionInfo1 (e.g. [][]DispersionInfo1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDispersionInfo1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDispersionInfo1, ok := obj.(DispersionInfo1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDispersionInfo1Required(aDispersionInfo1)
	})
}
