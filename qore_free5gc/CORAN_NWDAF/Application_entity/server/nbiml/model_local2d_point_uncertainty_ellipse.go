/*
 * Nnwdaf_MLModelProvision
 *
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.0.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nbiml

// Local2dPointUncertaintyEllipse - Local 2D point with uncertainty ellipse
type Local2dPointUncertaintyEllipse struct {
	GadShape

	LocalOrigin LocalOrigin `json:"localOrigin"`

	Point RelativeCartesianLocation `json:"point"`

	UncertaintyEllipse UncertaintyEllipse `json:"uncertaintyEllipse"`

	// Indicates value of confidence.
	Confidence int32 `json:"confidence"`
}

// AssertLocal2dPointUncertaintyEllipseRequired checks if the required fields are not zero-ed
func AssertLocal2dPointUncertaintyEllipseRequired(obj Local2dPointUncertaintyEllipse) error {
	elements := map[string]interface{}{
		"localOrigin":        obj.LocalOrigin,
		"point":              obj.Point,
		"uncertaintyEllipse": obj.UncertaintyEllipse,
		"confidence":         obj.Confidence,
		"shape":              obj.Shape,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertGadShapeRequired(obj.GadShape); err != nil {
		return err
	}

	if err := AssertLocalOriginRequired(obj.LocalOrigin); err != nil {
		return err
	}
	if err := AssertRelativeCartesianLocationRequired(obj.Point); err != nil {
		return err
	}
	if err := AssertUncertaintyEllipseRequired(obj.UncertaintyEllipse); err != nil {
		return err
	}
	return nil
}

// AssertRecurseLocal2dPointUncertaintyEllipseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Local2dPointUncertaintyEllipse (e.g. [][]Local2dPointUncertaintyEllipse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseLocal2dPointUncertaintyEllipseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aLocal2dPointUncertaintyEllipse, ok := obj.(Local2dPointUncertaintyEllipse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertLocal2dPointUncertaintyEllipseRequired(aLocal2dPointUncertaintyEllipse)
	})
}
