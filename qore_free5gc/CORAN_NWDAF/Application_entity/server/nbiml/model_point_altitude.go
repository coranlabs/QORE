/*
 * Nnwdaf_MLModelProvision
 *
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.0.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nbiml

// PointAltitude - Ellipsoid point with altitude.
type PointAltitude struct {
	GadShape

	Point GeographicalCoordinates `json:"point"`

	// Indicates value of altitude.
	Altitude float64 `json:"altitude"`
}

// AssertPointAltitudeRequired checks if the required fields are not zero-ed
func AssertPointAltitudeRequired(obj PointAltitude) error {
	elements := map[string]interface{}{
		"point":    obj.Point,
		"altitude": obj.Altitude,
		"shape":    obj.Shape,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertGadShapeRequired(obj.GadShape); err != nil {
		return err
	}

	if err := AssertGeographicalCoordinatesRequired(obj.Point); err != nil {
		return err
	}
	return nil
}

// AssertRecursePointAltitudeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PointAltitude (e.g. [][]PointAltitude), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePointAltitudeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPointAltitude, ok := obj.(PointAltitude)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPointAltitudeRequired(aPointAltitude)
	})
}
