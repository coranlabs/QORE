// Code generated by generate.sh, DO NOT EDIT.

package nasMessage

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/coranlabs/CORAN_LIB_NAS/nasType"
)

type RegistrationComplete struct {
	nasType.ExtendedProtocolDiscriminator
	nasType.SpareHalfOctetAndSecurityHeaderType
	nasType.RegistrationCompleteMessageIdentity
	*nasType.SORTransparentContainer
}

func NewRegistrationComplete(iei uint8) (registrationComplete *RegistrationComplete) {
	registrationComplete = &RegistrationComplete{}
	return registrationComplete
}

const (
	RegistrationCompleteSORTransparentContainerType uint8 = 0x73
)

func (a *RegistrationComplete) EncodeRegistrationComplete(buffer *bytes.Buffer) error {
	if err := binary.Write(buffer, binary.BigEndian, a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS encode error (RegistrationComplete/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS encode error (RegistrationComplete/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.RegistrationCompleteMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS encode error (RegistrationComplete/RegistrationCompleteMessageIdentity): %w", err)
	}
	if a.SORTransparentContainer != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.SORTransparentContainer.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (RegistrationComplete/SORTransparentContainer): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.SORTransparentContainer.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (RegistrationComplete/SORTransparentContainer): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.SORTransparentContainer.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (RegistrationComplete/SORTransparentContainer): %w", err)
		}
	}
	return nil
}

func (a *RegistrationComplete) DecodeRegistrationComplete(byteArray *[]byte) error {
	buffer := bytes.NewBuffer(*byteArray)
	if err := binary.Read(buffer, binary.BigEndian, &a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS decode error (RegistrationComplete/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS decode error (RegistrationComplete/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.RegistrationCompleteMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS decode error (RegistrationComplete/RegistrationCompleteMessageIdentity): %w", err)
	}
	for buffer.Len() > 0 {
		var ieiN uint8
		var tmpIeiN uint8
		if err := binary.Read(buffer, binary.BigEndian, &ieiN); err != nil {
			return fmt.Errorf("NAS decode error (RegistrationComplete/iei): %w", err)
		}
		// fmt.Println(ieiN)
		if ieiN >= 0x80 {
			tmpIeiN = (ieiN & 0xf0) >> 4
		} else {
			tmpIeiN = ieiN
		}
		// fmt.Println("type", tmpIeiN)
		switch tmpIeiN {
		case RegistrationCompleteSORTransparentContainerType:
			a.SORTransparentContainer = nasType.NewSORTransparentContainer(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.SORTransparentContainer.Len); err != nil {
				return fmt.Errorf("NAS decode error (RegistrationComplete/SORTransparentContainer): %w", err)
			}
			if a.SORTransparentContainer.Len < 17 || a.SORTransparentContainer.Len > 2045 {
				return fmt.Errorf("invalid ie length (RegistrationComplete/SORTransparentContainer): %d", a.SORTransparentContainer.Len)
			}
			a.SORTransparentContainer.SetLen(a.SORTransparentContainer.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.SORTransparentContainer.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (RegistrationComplete/SORTransparentContainer): %w", err)
			}
		default:
		}
	}
	return nil
}
