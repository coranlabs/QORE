/*
 * Npcf_BDTPolicyControl Service API
 *
 * The Npcf_BDTPolicyControl Service is used by an NF service consumer to
 * retrieve background data transfer policies from the PCF and to update the PCF with
 * the background data transfer policy selected by the NF service consumer.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cmd

import (
	"context"
	// "fmt"
	"os"
	"os/signal"

	"syscall"

	// logger_util "github.com/coranlabs/CORAN_LIB_UTIL/logger"
	"github.com/coranlabs/CORAN_LIB_UTIL/version"
	"github.com/coranlabs/CORAN_PCF/Application_entity/logger"
	"github.com/coranlabs/CORAN_PCF/Application_entity/pkg/factory"
	"github.com/coranlabs/CORAN_PCF/Application_entity/pkg/service"
)

var PCF *service.PcfApp

func Action() error {
	tlsKeyLogPath := ""

	logger.MainLog.Infoln()
	logger.MainLog.Infoln("PCF version: ", version.GetVersion())

	ctx, cancel := context.WithCancel(context.Background())
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-sigCh  // Wait for interrupt signal to gracefully shutdown UPF
		cancel() // Notify each goroutine and wait them stopped
	}()

	cfg, err := factory.ReadConfig("./config/CORAN_PCF.yaml")
	if err != nil {
		sigCh <- nil
		return err
	}
	factory.PcfConfig = cfg

	pcf, err := service.NewApp(ctx, cfg, tlsKeyLogPath)
	if err != nil {
		sigCh <- nil
		return err
	}
	PCF = pcf
	if pcf == nil {
		logger.MainLog.Infoln("pcf is nil")
	}
	pcf.Start()

	return nil
}
