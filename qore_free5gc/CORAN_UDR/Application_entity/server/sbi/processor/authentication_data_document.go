/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"

	"github.com/coranlabs/CORAN_LIB_OPENAPI/models"
	"github.com/coranlabs/CORAN_UDR/Application_entity/logger"
	"github.com/coranlabs/CORAN_UDR/Application_entity/server/util"
	// "github.com/coranlabs/CORAN_UDR/Application_entity/logger"
	// "github.com/coranlabs/CORAN_UDR/Application_entity/server/util"
)

func (p *Processor) ModifyAuthenticationProcedure(
	c *gin.Context, collName string, ueId string, patchItem []models.PatchItem,
) {
	var err error
	var origValue, newValue map[string]interface{}
	filter := bson.M{"ueId": ueId}
	if origValue, newValue, err = p.PatchDataToDBAndNotify(collName, ueId, patchItem, filter); err != nil {
		logger.DataRepoLog.Errorf("ModifyAuthenticationProcedure err: %+v", err)
		c.JSON(http.StatusInternalServerError, util.ProblemDetailsModifyNotAllowed(""))
	}
	PreHandleOnDataChangeNotify(ueId, CurrentResourceUri, patchItem, origValue, newValue)
	c.Status(http.StatusNoContent)
}

func (p *Processor) QueryAuthSubsDataProcedure(c *gin.Context, collName string, ueId string) {
	filter := bson.M{"ueId": ueId}
	data, pd := p.GetDataFromDB(collName, filter)
	if pd != nil {
		if pd.Status == http.StatusNotFound {
			logger.DataRepoLog.Warnf("QueryAuthSubsDataProcedure err: %s", pd.Title)
		} else {
			logger.DataRepoLog.Errorf("QueryAuthSubsDataProcedure err: %s", pd.Detail)
		}
		c.JSON(int(pd.Status), pd)
		return
	}
	c.JSON(http.StatusOK, data)
}
