/*
 * Nnwdaf_MLModelProvision
 *
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.0.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nbiml

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController binds http requests to an api service and writes the service results to the http response
type IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController struct {
	service      IndividualNWDAFMLModelProvisionSubscriptionDocumentApiServicer
	errorHandler ErrorHandler
}

// IndividualNWDAFMLModelProvisionSubscriptionDocumentApiOption for how the controller is set up.
type IndividualNWDAFMLModelProvisionSubscriptionDocumentApiOption func(*IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController)

// WithIndividualNWDAFMLModelProvisionSubscriptionDocumentApiErrorHandler inject ErrorHandler into controller
func WithIndividualNWDAFMLModelProvisionSubscriptionDocumentApiErrorHandler(h ErrorHandler) IndividualNWDAFMLModelProvisionSubscriptionDocumentApiOption {
	return func(c *IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController) {
		c.errorHandler = h
	}
}

// NewIndividualNWDAFMLModelProvisionSubscriptionDocumentApiController creates a default api controller
func NewIndividualNWDAFMLModelProvisionSubscriptionDocumentApiController(s IndividualNWDAFMLModelProvisionSubscriptionDocumentApiServicer, opts ...IndividualNWDAFMLModelProvisionSubscriptionDocumentApiOption) Router {
	controller := &IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController) Routes() Routes {
	return Routes{
		{
			"DeleteNWDAFMLModelProvisionSubcription",
			strings.ToUpper("Delete"),
			"/nnwdaf-mlmodelprovision/v1/subscriptions/{subscriptionId}",
			c.DeleteNWDAFMLModelProvisionSubcription,
		},
		{
			"UpdateNWDAFMLModelProvisionSubcription",
			strings.ToUpper("Put"),
			"/nnwdaf-mlmodelprovision/v1/subscriptions/{subscriptionId}",
			c.UpdateNWDAFMLModelProvisionSubcription,
		},
	}
}

// DeleteNWDAFMLModelProvisionSubcription - Delete an existing Individual NWDAF ML Model Provision Subscription.
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController) DeleteNWDAFMLModelProvisionSubcription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]

	result, err := c.service.DeleteNWDAFMLModelProvisionSubcription(r.Context(), subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateNWDAFMLModelProvisionSubcription - update an existing Individual NWDAF ML Model Provision Subscription
func (c *IndividualNWDAFMLModelProvisionSubscriptionDocumentApiController) UpdateNWDAFMLModelProvisionSubcription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]

	nwdafMlModelProvSubscParam := NwdafMlModelProvSubsc{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&nwdafMlModelProvSubscParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNwdafMlModelProvSubscRequired(nwdafMlModelProvSubscParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNWDAFMLModelProvisionSubcription(r.Context(), subscriptionIdParam, nwdafMlModelProvSubscParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
