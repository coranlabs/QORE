/*
 * Nnwdaf_MLModelProvision
 *
 * Nnwdaf_MLModelProvision API Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.0.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nbiml

// NwdafMlModelProvSubsc - Represents NWDAF Event Subscription resources.
type NwdafMlModelProvSubsc struct {

	// Subscribed events
	MLEventSubscs []MlEventSubscription `json:"mLEventSubscs"`

	// String providing an URI formatted according to RFC 3986
	NotifUri string `json:"notifUri"`

	MLEventNotifs []MlEventNotif `json:"mLEventNotifs,omitempty"`

	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SuppFeats string `json:"suppFeats,omitempty"`

	NotifCorreId string `json:"notifCorreId,omitempty"`

	EventReq ReportingInformation `json:"eventReq,omitempty"`

	FailEventReports FailureEventInfoForMlModel `json:"failEventReports,omitempty"`
}

// AssertNwdafMlModelProvSubscRequired checks if the required fields are not zero-ed
func AssertNwdafMlModelProvSubscRequired(obj NwdafMlModelProvSubsc) error {
	elements := map[string]interface{}{
		"mLEventSubscs": obj.MLEventSubscs,
		"notifUri":      obj.NotifUri,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.MLEventSubscs {
		if err := AssertMlEventSubscriptionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MLEventNotifs {
		if err := AssertMlEventNotifRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReportingInformationRequired(obj.EventReq); err != nil {
		return err
	}
	if err := AssertFailureEventInfoForMlModelRequired(obj.FailEventReports); err != nil {
		return err
	}
	return nil
}

// AssertRecurseNwdafMlModelProvSubscRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NwdafMlModelProvSubsc (e.g. [][]NwdafMlModelProvSubsc), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseNwdafMlModelProvSubscRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNwdafMlModelProvSubsc, ok := obj.(NwdafMlModelProvSubsc)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertNwdafMlModelProvSubscRequired(aNwdafMlModelProvSubsc)
	})
}
