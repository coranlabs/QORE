/*
Nsmf_EventExposure

Session Management Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smfclient

import (
	"encoding/json"
	"fmt"
)

// NFTypeAnyOf the model 'NFTypeAnyOf'
type NFTypeAnyOf string

// List of NFType_anyOf
const (
	NFTYPEANYOF_NRF NFTypeAnyOf = "NRF"
	NFTYPEANYOF_UDM NFTypeAnyOf = "UDM"
	NFTYPEANYOF_AMF NFTypeAnyOf = "AMF"
	NFTYPEANYOF_SMF NFTypeAnyOf = "SMF"
	NFTYPEANYOF_AUSF NFTypeAnyOf = "AUSF"
	NFTYPEANYOF_NEF NFTypeAnyOf = "NEF"
	NFTYPEANYOF_PCF NFTypeAnyOf = "PCF"
	NFTYPEANYOF_SMSF NFTypeAnyOf = "SMSF"
	NFTYPEANYOF_NSSF NFTypeAnyOf = "NSSF"
	NFTYPEANYOF_UDR NFTypeAnyOf = "UDR"
	NFTYPEANYOF_LMF NFTypeAnyOf = "LMF"
	NFTYPEANYOF_GMLC NFTypeAnyOf = "GMLC"
	NFTYPEANYOF__5_G_EIR NFTypeAnyOf = "5G_EIR"
	NFTYPEANYOF_SEPP NFTypeAnyOf = "SEPP"
	NFTYPEANYOF_UPF NFTypeAnyOf = "UPF"
	NFTYPEANYOF_N3_IWF NFTypeAnyOf = "N3IWF"
	NFTYPEANYOF_AF NFTypeAnyOf = "AF"
	NFTYPEANYOF_UDSF NFTypeAnyOf = "UDSF"
	NFTYPEANYOF_BSF NFTypeAnyOf = "BSF"
	NFTYPEANYOF_CHF NFTypeAnyOf = "CHF"
	NFTYPEANYOF_NWDAF NFTypeAnyOf = "NWDAF"
	NFTYPEANYOF_PCSCF NFTypeAnyOf = "PCSCF"
	NFTYPEANYOF_CBCF NFTypeAnyOf = "CBCF"
	NFTYPEANYOF_HSS NFTypeAnyOf = "HSS"
	NFTYPEANYOF_UCMF NFTypeAnyOf = "UCMF"
	NFTYPEANYOF_SOR_AF NFTypeAnyOf = "SOR_AF"
	NFTYPEANYOF_SPAF NFTypeAnyOf = "SPAF"
	NFTYPEANYOF_MME NFTypeAnyOf = "MME"
	NFTYPEANYOF_SCSAS NFTypeAnyOf = "SCSAS"
	NFTYPEANYOF_SCEF NFTypeAnyOf = "SCEF"
	NFTYPEANYOF_SCP NFTypeAnyOf = "SCP"
	NFTYPEANYOF_NSSAAF NFTypeAnyOf = "NSSAAF"
	NFTYPEANYOF_ICSCF NFTypeAnyOf = "ICSCF"
	NFTYPEANYOF_SCSCF NFTypeAnyOf = "SCSCF"
	NFTYPEANYOF_DRA NFTypeAnyOf = "DRA"
	NFTYPEANYOF_IMS_AS NFTypeAnyOf = "IMS_AS"
	NFTYPEANYOF_AANF NFTypeAnyOf = "AANF"
	NFTYPEANYOF__5_G_DDNMF NFTypeAnyOf = "5G_DDNMF"
	NFTYPEANYOF_NSACF NFTypeAnyOf = "NSACF"
	NFTYPEANYOF_MFAF NFTypeAnyOf = "MFAF"
	NFTYPEANYOF_EASDF NFTypeAnyOf = "EASDF"
	NFTYPEANYOF_DCCF NFTypeAnyOf = "DCCF"
	NFTYPEANYOF_MB_SMF NFTypeAnyOf = "MB-SMF"
	NFTYPEANYOF_TSCTSF NFTypeAnyOf = "TSCTSF"
	NFTYPEANYOF_ADRF NFTypeAnyOf = "ADRF"
	NFTYPEANYOF_GBA_BSF NFTypeAnyOf = "GBA_BSF"
	NFTYPEANYOF_CEF NFTypeAnyOf = "CEF"
	NFTYPEANYOF_MB_UPF NFTypeAnyOf = "MB-UPF"
	NFTYPEANYOF_NSWOF NFTypeAnyOf = "NSWOF"
)

// All allowed values of NFTypeAnyOf enum
var AllowedNFTypeAnyOfEnumValues = []NFTypeAnyOf{
	"NRF",
	"UDM",
	"AMF",
	"SMF",
	"AUSF",
	"NEF",
	"PCF",
	"SMSF",
	"NSSF",
	"UDR",
	"LMF",
	"GMLC",
	"5G_EIR",
	"SEPP",
	"UPF",
	"N3IWF",
	"AF",
	"UDSF",
	"BSF",
	"CHF",
	"NWDAF",
	"PCSCF",
	"CBCF",
	"HSS",
	"UCMF",
	"SOR_AF",
	"SPAF",
	"MME",
	"SCSAS",
	"SCEF",
	"SCP",
	"NSSAAF",
	"ICSCF",
	"SCSCF",
	"DRA",
	"IMS_AS",
	"AANF",
	"5G_DDNMF",
	"NSACF",
	"MFAF",
	"EASDF",
	"DCCF",
	"MB-SMF",
	"TSCTSF",
	"ADRF",
	"GBA_BSF",
	"CEF",
	"MB-UPF",
	"NSWOF",
}

func (v *NFTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NFTypeAnyOf(value)
	for _, existing := range AllowedNFTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NFTypeAnyOf", value)
}

// NewNFTypeAnyOfFromValue returns a pointer to a valid NFTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNFTypeAnyOfFromValue(v string) (*NFTypeAnyOf, error) {
	ev := NFTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NFTypeAnyOf: valid values are %v", v, AllowedNFTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NFTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedNFTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NFType_anyOf value
func (v NFTypeAnyOf) Ptr() *NFTypeAnyOf {
	return &v
}

type NullableNFTypeAnyOf struct {
	value *NFTypeAnyOf
	isSet bool
}

func (v NullableNFTypeAnyOf) Get() *NFTypeAnyOf {
	return v.value
}

func (v *NullableNFTypeAnyOf) Set(val *NFTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNFTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNFTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFTypeAnyOf(val *NFTypeAnyOf) *NullableNFTypeAnyOf {
	return &NullableNFTypeAnyOf{value: val, isSet: true}
}

func (v NullableNFTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

