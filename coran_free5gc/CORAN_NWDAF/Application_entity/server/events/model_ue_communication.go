/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

import (
	"time"
)

// UeCommunication - Represents UE communication information.
type UeCommunication struct {

	// indicating a time in seconds.
	CommDur int32 `json:"commDur"`

	// string with format 'float' as defined in OpenAPI.
	CommDurVariance float32 `json:"commDurVariance,omitempty"`

	// indicating a time in seconds.
	PerioTime int32 `json:"perioTime,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	PerioTimeVariance float32 `json:"perioTimeVariance,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	Ts time.Time `json:"ts,omitempty"`

	// string with format 'float' as defined in OpenAPI.
	TsVariance float32 `json:"tsVariance,omitempty"`

	RecurringTime ScheduledCommunicationTime `json:"recurringTime,omitempty"`

	TrafChar TrafficCharacterization `json:"trafChar"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
	Ratio int32 `json:"ratio,omitempty"`

	PerioCommInd bool `json:"perioCommInd,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence int32 `json:"confidence,omitempty"`

	AnaOfAppList AppListForUeComm `json:"anaOfAppList,omitempty"`

	SessInactTimer SessInactTimerForUeComm `json:"sessInactTimer,omitempty"`
}

// AssertUeCommunicationRequired checks if the required fields are not zero-ed
func AssertUeCommunicationRequired(obj UeCommunication) error {
	elements := map[string]interface{}{
		"commDur":  obj.CommDur,
		"trafChar": obj.TrafChar,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertScheduledCommunicationTimeRequired(obj.RecurringTime); err != nil {
		return err
	}
	if err := AssertTrafficCharacterizationRequired(obj.TrafChar); err != nil {
		return err
	}
	if err := AssertAppListForUeCommRequired(obj.AnaOfAppList); err != nil {
		return err
	}
	if err := AssertSessInactTimerForUeCommRequired(obj.SessInactTimer); err != nil {
		return err
	}
	return nil
}

// AssertRecurseUeCommunicationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UeCommunication (e.g. [][]UeCommunication), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUeCommunicationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUeCommunication, ok := obj.(UeCommunication)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUeCommunicationRequired(aUeCommunication)
	})
}
