/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualNWDAFEventSubscriptionTransferDocumentApiController binds http requests to an api service and writes the service results to the http response
type IndividualNWDAFEventSubscriptionTransferDocumentApiController struct {
	service      IndividualNWDAFEventSubscriptionTransferDocumentApiServicer
	errorHandler ErrorHandler
}

// IndividualNWDAFEventSubscriptionTransferDocumentApiOption for how the controller is set up.
type IndividualNWDAFEventSubscriptionTransferDocumentApiOption func(*IndividualNWDAFEventSubscriptionTransferDocumentApiController)

// WithIndividualNWDAFEventSubscriptionTransferDocumentApiErrorHandler inject ErrorHandler into controller
func WithIndividualNWDAFEventSubscriptionTransferDocumentApiErrorHandler(h ErrorHandler) IndividualNWDAFEventSubscriptionTransferDocumentApiOption {
	return func(c *IndividualNWDAFEventSubscriptionTransferDocumentApiController) {
		c.errorHandler = h
	}
}

// NewIndividualNWDAFEventSubscriptionTransferDocumentApiController creates a default api controller
func NewIndividualNWDAFEventSubscriptionTransferDocumentApiController(s IndividualNWDAFEventSubscriptionTransferDocumentApiServicer, opts ...IndividualNWDAFEventSubscriptionTransferDocumentApiOption) Router {
	controller := &IndividualNWDAFEventSubscriptionTransferDocumentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IndividualNWDAFEventSubscriptionTransferDocumentApiController
func (c *IndividualNWDAFEventSubscriptionTransferDocumentApiController) Routes() Routes {
	return Routes{
		{
			"DeleteNWDAFEventSubscriptionTransfer",
			strings.ToUpper("Delete"),
			"/nnwdaf-eventssubscription/v1/transfers/{transferId}",
			c.DeleteNWDAFEventSubscriptionTransfer,
		},
		{
			"UpdateNWDAFEventSubscriptionTransfer",
			strings.ToUpper("Put"),
			"/nnwdaf-eventssubscription/v1/transfers/{transferId}",
			c.UpdateNWDAFEventSubscriptionTransfer,
		},
	}
}

// DeleteNWDAFEventSubscriptionTransfer - Delete an existing Individual NWDAF Event Subscription Transfer
func (c *IndividualNWDAFEventSubscriptionTransferDocumentApiController) DeleteNWDAFEventSubscriptionTransfer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	transferIdParam := params["transferId"]

	result, err := c.service.DeleteNWDAFEventSubscriptionTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateNWDAFEventSubscriptionTransfer - Update an existing Individual NWDAF Event Subscription Transfer
func (c *IndividualNWDAFEventSubscriptionTransferDocumentApiController) UpdateNWDAFEventSubscriptionTransfer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	transferIdParam := params["transferId"]

	analyticsSubscriptionsTransferParam := AnalyticsSubscriptionsTransfer{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&analyticsSubscriptionsTransferParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAnalyticsSubscriptionsTransferRequired(analyticsSubscriptionsTransferParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNWDAFEventSubscriptionTransfer(r.Context(), transferIdParam, analyticsSubscriptionsTransferParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
