/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// SubscriptionTransferInfo - Contains information about subscriptions that are requested to be transferred.
type SubscriptionTransferInfo struct {
	TransReqType TransferRequestType `json:"transReqType"`

	NwdafEvSub NnwdafEventsSubscription `json:"nwdafEvSub"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	ConsumerId string `json:"consumerId"`

	ContextId AnalyticsContextIdentifier `json:"contextId,omitempty"`

	SourceNfIds []string `json:"sourceNfIds,omitempty"`

	SourceSetIds []string `json:"sourceSetIds,omitempty"`

	ModelInfo []ModelInfo `json:"modelInfo,omitempty"`

	ModelProvIds []string `json:"modelProvIds,omitempty"`
}

// AssertSubscriptionTransferInfoRequired checks if the required fields are not zero-ed
func AssertSubscriptionTransferInfoRequired(obj SubscriptionTransferInfo) error {
	elements := map[string]interface{}{
		"transReqType": obj.TransReqType,
		"nwdafEvSub":   obj.NwdafEvSub,
		"consumerId":   obj.ConsumerId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTransferRequestTypeRequired(obj.TransReqType); err != nil {
		return err
	}
	if err := AssertNnwdafEventsSubscriptionRequired(obj.NwdafEvSub); err != nil {
		return err
	}
	if err := AssertAnalyticsContextIdentifierRequired(obj.ContextId); err != nil {
		return err
	}
	for _, el := range obj.ModelInfo {
		if err := AssertModelInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseSubscriptionTransferInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SubscriptionTransferInfo (e.g. [][]SubscriptionTransferInfo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSubscriptionTransferInfoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSubscriptionTransferInfo, ok := obj.(SubscriptionTransferInfo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSubscriptionTransferInfoRequired(aSubscriptionTransferInfo)
	})
}
