/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package events

// ConsumerNfInformation1 - Represents the analytics consumer NF Information.
type ConsumerNfInformation1 struct {

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	NfId string `json:"nfId,omitempty"`

	TaiList []Tai `json:"taiList,omitempty"`
}

// AssertConsumerNfInformation1Required checks if the required fields are not zero-ed
func AssertConsumerNfInformation1Required(obj ConsumerNfInformation1) error {
	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseConsumerNfInformation1Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ConsumerNfInformation1 (e.g. [][]ConsumerNfInformation1), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseConsumerNfInformation1Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aConsumerNfInformation1, ok := obj.(ConsumerNfInformation1)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertConsumerNfInformation1Required(aConsumerNfInformation1)
	})
}
