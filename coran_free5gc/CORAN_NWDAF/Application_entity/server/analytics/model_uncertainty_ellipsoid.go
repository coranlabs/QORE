/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

// UncertaintyEllipsoid - Ellipsoid with uncertainty
type UncertaintyEllipsoid struct {

	// Indicates value of uncertainty.
	SemiMajor float32 `json:"semiMajor"`

	// Indicates value of uncertainty.
	SemiMinor float32 `json:"semiMinor"`

	// Indicates value of uncertainty.
	Vertical float32 `json:"vertical"`

	// Indicates value of orientation angle.
	OrientationMajor int32 `json:"orientationMajor"`
}

// AssertUncertaintyEllipsoidRequired checks if the required fields are not zero-ed
func AssertUncertaintyEllipsoidRequired(obj UncertaintyEllipsoid) error {
	elements := map[string]interface{}{
		"semiMajor":        obj.SemiMajor,
		"semiMinor":        obj.SemiMinor,
		"vertical":         obj.Vertical,
		"orientationMajor": obj.OrientationMajor,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUncertaintyEllipsoidRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UncertaintyEllipsoid (e.g. [][]UncertaintyEllipsoid), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUncertaintyEllipsoidRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUncertaintyEllipsoid, ok := obj.(UncertaintyEllipsoid)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUncertaintyEllipsoidRequired(aUncertaintyEllipsoid)
	})
}
