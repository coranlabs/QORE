/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

import (
	"time"
)

// HistoricalData - Contains historical data related to an analytics subscription.
type HistoricalData struct {

	// string with format 'date-time' as defined in OpenAPI.
	StartTime time.Time `json:"startTime,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	EndTime time.Time `json:"endTime,omitempty"`

	// Information about subscriptions with the data sources.
	SubsWithSources []string `json:"subsWithSources,omitempty"`

	// Historical data related to the analytics.
	Data []string `json:"data"`
}

// AssertHistoricalDataRequired checks if the required fields are not zero-ed
func AssertHistoricalDataRequired(obj HistoricalData) error {
	elements := map[string]interface{}{
		"data": obj.Data,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseHistoricalDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of HistoricalData (e.g. [][]HistoricalData), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseHistoricalDataRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aHistoricalData, ok := obj.(HistoricalData)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertHistoricalDataRequired(aHistoricalData)
	})
}
