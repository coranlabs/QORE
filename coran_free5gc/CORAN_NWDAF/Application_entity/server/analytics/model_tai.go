/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

// Tai - Contains the tracking area identity as described in 3GPP 23.003
type Tai struct {
	PlmnId PlmnId `json:"plmnId"`

	// 2 or 3-octet string identifying a tracking area code as specified in clause 9.3.3.10  of 3GPP TS 38.413, in hexadecimal representation. Each character in the string shall  take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall  appear first in the string, and the character representing the 4 least significant bit  of the TAC shall appear last in the string.
	Tac string `json:"tac"`

	// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).
	Nid string `json:"nid,omitempty"`
}

// AssertTaiRequired checks if the required fields are not zero-ed
func AssertTaiRequired(obj Tai) error {
	elements := map[string]interface{}{
		"plmnId": obj.PlmnId,
		// "tac": obj.Tac, // TODO: ensure is always present (currently impossible for SMF)
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPlmnIdRequired(obj.PlmnId); err != nil {
		return err
	}
	return nil
}

// AssertRecurseTaiRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Tai (e.g. [][]Tai), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTaiRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTai, ok := obj.(Tai)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTaiRequired(aTai)
	})
}
