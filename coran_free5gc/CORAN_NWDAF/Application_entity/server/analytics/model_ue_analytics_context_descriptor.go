/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

// UeAnalyticsContextDescriptor - Contains information about available UE related analytics contexts.
type UeAnalyticsContextDescriptor struct {

	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2 of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall only contain characters allowed according to the \"lower-with-hyphen\" naming convention defined in 3GPP TS 29.501.
	Supi string `json:"supi"`

	// List of analytics types for which UE related analytics contexts can be retrieved.
	AnaTypes []NwdafEvent `json:"anaTypes"`
}

// AssertUeAnalyticsContextDescriptorRequired checks if the required fields are not zero-ed
func AssertUeAnalyticsContextDescriptorRequired(obj UeAnalyticsContextDescriptor) error {
	elements := map[string]interface{}{
		"supi":     obj.Supi,
		"anaTypes": obj.AnaTypes,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.AnaTypes {
		if err := AssertNwdafEventRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseUeAnalyticsContextDescriptorRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UeAnalyticsContextDescriptor (e.g. [][]UeAnalyticsContextDescriptor), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUeAnalyticsContextDescriptorRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUeAnalyticsContextDescriptor, ok := obj.(UeAnalyticsContextDescriptor)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUeAnalyticsContextDescriptorRequired(aUeAnalyticsContextDescriptor)
	})
}
