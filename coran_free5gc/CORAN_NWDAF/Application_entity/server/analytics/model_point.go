/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package analytics

// Point - Ellipsoid Point.
type Point struct {
	GadShape

	Point GeographicalCoordinates `json:"point"`
}

// AssertPointRequired checks if the required fields are not zero-ed
func AssertPointRequired(obj Point) error {
	elements := map[string]interface{}{
		"point": obj.Point,
		"shape": obj.Shape,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertGadShapeRequired(obj.GadShape); err != nil {
		return err
	}

	if err := AssertGeographicalCoordinatesRequired(obj.Point); err != nil {
		return err
	}
	return nil
}

// AssertRecursePointRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Point (e.g. [][]Point), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePointRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPoint, ok := obj.(Point)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPointRequired(aPoint)
	})
}
