// Copyright 2019-2024 go-pfcp authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package message_test

import (
	"testing"

	"github.com/coranlabs/CORAN_GO_PFCP/ie"
	"github.com/coranlabs/CORAN_GO_PFCP/message"

	"github.com/coranlabs/CORAN_GO_PFCP/internal/testutil"
)

func TestPFDManagementRequest(t *testing.T) {
	cases := []testutil.TestCase{
		{
			Description: "Empty PFDContent",
			Structured: message.NewPFDManagementRequest(seq,
				ie.NewApplicationIDsPFDs(
					ie.NewApplicationID("https://github.com/wmnsk/go-pfcp/"),
					ie.NewPFDContext(
						ie.NewPFDContents("", "", "", "", "", []string{}, []string{}, []string{}),
					),
				),
			),
			Serialized: []byte{
				0x20, 0x03, // Flag + MsgType: PFCP PFD Mgmt Req
				0x00, 0x37, // Msg Len
				0x11, 0x22, 0x33, 0x00, // Seq Num + 1 byte spare
				0x00, 0x3a, // IE type: Application ID's PFDs (58)
				0x00, 0x2f, // IE Len
				// ApplicationID
				0x00, 0x18, // IE Type: Application ID
				0x00, 0x21, // IE Len
				0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6d, 0x6e, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x66, 0x63, 0x70, 0x2f,
				// PFD Context
				0x00, 0x3b, // IE type: PFD Context
				0x00, 0x06, // IE Len
				0x00, 0x3d, // IE type: PFD Content
				0x00, 0x02, // IE Len
				0x00, 0x00, // Flag (0x00, no FD, no CP, no DN, ... nothing) + Spare
			},
		}, {
			Description: "Empty PFDContent + NodeID",
			Structured: message.NewPFDManagementRequest(seq,
				ie.NewApplicationIDsPFDs(
					ie.NewApplicationID("te5t@pp"),
					ie.NewPFDContext(
						ie.NewPFDContents("", "", "", "", "", []string{}, []string{}, []string{}),
					),
				),
				ie.NewNodeID("172.16.41.51", "", ""),
			),
			Serialized: []byte{
				0x20, 0x03, // Flag + MsgType: PFCP PFD Mgmt Req
				0x00, 0x26, // Msg Len
				0x11, 0x22, 0x33, 0x00, // Seq Num + 1 byte spare
				0x00, 0x3a, // IE type: Application ID's PFDs (58)
				0x00, 0x15, // IE Len
				// ApplicationID
				0x00, 0x18, // IE Type: Application ID
				0x00, 0x07, // IE Len
				0x74, 0x65, 0x35, 0x74, 0x40, 0x70, 0x70, // te5t@pp
				// PFD Context
				0x00, 0x3b, // IE type: PFD Context
				0x00, 0x06, // IE Len
				0x00, 0x3d, // IE type: PFD Content
				0x00, 0x02, // IE Len
				0x00, 0x00, // Flag (0x00, no FD, no CP, no DN, ... nothing) + Spare
				0x00, 0x3c, // IE Type: Node ID
				0x00, 0x05, 0x00, // IE Len + 1 byte spare
				0xac, 0x10, 0x29, 0x33,
			},
		}, {
			Description: "Single IE",
			Structured: message.NewPFDManagementRequest(seq,
				ie.NewApplicationIDsPFDs(
					ie.NewApplicationID("https://github.com/wmnsk/go-pfcp/"),
					ie.NewPFDContext(
						ie.NewPFDContents("aa", "bb", "cc", "dd", "ee", []string{"11", "22"}, []string{"33", "44"}, []string{"55", "66"}),
					),
				),
			),
			Serialized: []byte{
				0x20, 0x03, 0x00, 0x69, 0x11, 0x22, 0x33, 0x00,
				0x00, 0x3a, 0x00, 0x61,
				// ApplicationID
				0x00, 0x18, 0x00, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6d, 0x6e, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x66, 0x63, 0x70, 0x2f,
				// PFDContext
				0x00, 0x3b, 0x00, 0x38,
				0x00, 0x3d, 0x00, 0x34,
				0xff, 0x00, // Flags & Spare octet
				0x00, 0x02, 0x61, 0x61, // FD
				0x00, 0x02, 0x62, 0x62, // URL
				0x00, 0x02, 0x63, 0x63, // DN
				0x00, 0x02, 0x64, 0x64, // CP
				0x00, 0x02, 0x65, 0x65, // DNP
				0x00, 0x08, 0x00, 0x02, 0x31, 0x31, 0x00, 0x02, 0x32, 0x32, // AFD
				0x00, 0x08, 0x00, 0x02, 0x33, 0x33, 0x00, 0x02, 0x34, 0x34, // AURL
				0x00, 0x08, 0x00, 0x02, 0x35, 0x35, 0x00, 0x02, 0x36, 0x36, // ADNP
			},
		}, {
			Description: "Multiple IEs",
			Structured: message.NewPFDManagementRequest(seq,
				ie.NewApplicationIDsPFDs(
					ie.NewApplicationID("https://github.com/wmnsk/go-pfcp/"),
					ie.NewPFDContext(
						ie.NewPFDContents("aa", "bb", "cc", "dd", "ee", []string{"11", "22"}, []string{"33", "44"}, []string{"55", "66"}),
					),
				),
				ie.NewApplicationIDsPFDs(
					ie.NewApplicationID("https://github.com/wmnsk/go-pfcp/"),
					ie.NewPFDContext(
						ie.NewPFDContents("aa", "bb", "cc", "dd", "ee", []string{"11", "22"}, []string{"33", "44"}, []string{"55", "66"}),
					),
				),
			),
			Serialized: []byte{
				0x20, 0x03, 0x00, 0xce, 0x11, 0x22, 0x33, 0x00,
				0x00, 0x3a, 0x00, 0x61,
				// ApplicationID
				0x00, 0x18, 0x00, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6d, 0x6e, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x66, 0x63, 0x70, 0x2f,
				// PFDContext
				0x00, 0x3b, 0x00, 0x38,
				0x00, 0x3d, 0x00, 0x34,
				0xff, 0x00, // Flags & Spare octet
				0x00, 0x02, 0x61, 0x61, // FD
				0x00, 0x02, 0x62, 0x62, // URL
				0x00, 0x02, 0x63, 0x63, // DN
				0x00, 0x02, 0x64, 0x64, // CP
				0x00, 0x02, 0x65, 0x65, // DNP
				0x00, 0x08, 0x00, 0x02, 0x31, 0x31, 0x00, 0x02, 0x32, 0x32, // AFD
				0x00, 0x08, 0x00, 0x02, 0x33, 0x33, 0x00, 0x02, 0x34, 0x34, // AURL
				0x00, 0x08, 0x00, 0x02, 0x35, 0x35, 0x00, 0x02, 0x36, 0x36, // ADNP
				0x00, 0x3a, 0x00, 0x61,
				// ApplicationID
				0x00, 0x18, 0x00, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6d, 0x6e, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x66, 0x63, 0x70, 0x2f,
				// PFDContext
				0x00, 0x3b, 0x00, 0x38,
				0x00, 0x3d, 0x00, 0x34,
				0xff, 0x00, // Flags & Spare octet
				0x00, 0x02, 0x61, 0x61, // FD
				0x00, 0x02, 0x62, 0x62, // URL
				0x00, 0x02, 0x63, 0x63, // DN
				0x00, 0x02, 0x64, 0x64, // CP
				0x00, 0x02, 0x65, 0x65, // DNP
				0x00, 0x08, 0x00, 0x02, 0x31, 0x31, 0x00, 0x02, 0x32, 0x32, // AFD
				0x00, 0x08, 0x00, 0x02, 0x33, 0x33, 0x00, 0x02, 0x34, 0x34, // AURL
				0x00, 0x08, 0x00, 0x02, 0x35, 0x35, 0x00, 0x02, 0x36, 0x36, // ADNP
			},
		}, {
			Description: "PFDContent(FD + AFD) + NodeID",
			Structured: message.NewPFDManagementRequest(seq,
				ie.NewApplicationIDsPFDs(
					ie.NewApplicationID("te5t@pp"),
					ie.NewPFDContext(
						ie.NewPFDContents("permit out ip from 172.16.61.0/24 to 10.62.0.7",
							"", "", "", "",
							[]string{"permit in ip from 10.62.0.7 to 172.16.61.0/24"},
							[]string{}, nil),
					),
				),
				ie.NewNodeID("172.16.41.51", "", ""),
			),
			Serialized: []byte{
				0x20, 0x03, // Flag + MsgType: PFCP PFD Mgmt Req
				0x00, 0x87, // Len
				0x11, 0x22, 0x33, 0x00, // 3 bytes Seq number +  1 byte spare
				0x00, 0x3a, // IE type: Application ID's PFDs (58)
				0x00, 0x76, // IE Len
				// Application ID
				0x00, 0x18, // IE type: Application ID
				0x00, 0x07, // IE Len
				0x74, 0x65, 0x35, 0x74, 0x40, 0x70, 0x70, // Application ID: te5t@pp
				// PFD Context
				0x00, 0x3b, // IE type: PFD Context
				0x00, 0x67, // IE Len
				// PFD Content
				0x00, 0x3d, // IE type: PFD Content
				0x00, 0x63, // IE Len
				0x21, 0x00, // Flag (Flow Desc 0x01 + Additional Flow Desc 0x20) + Spare
				0x00, 0x2e, // Len(Flow Description)
				// Flow Description
				0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x20, 0x6f,
				0x75, 0x74, 0x20, 0x69, 0x70, 0x20, 0x66, 0x72,
				0x6f, 0x6d, 0x20, 0x31, 0x37, 0x32, 0x2e, 0x31,
				0x36, 0x2e, 0x36, 0x31, 0x2e, 0x30, 0x2f, 0x32,
				0x34, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x2e,
				0x36, 0x32, 0x2e, 0x30, 0x2e, 0x37,
				// Additional Flow Description
				0x00, 0x2f, // Len(Additional Flow Description)
				0x00, 0x2d, // Len(Flow Description)
				0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x20, 0x69,
				0x6e, 0x20, 0x69, 0x70, 0x20, 0x66, 0x72, 0x6f,
				0x6d, 0x20, 0x31, 0x30, 0x2e, 0x36, 0x32, 0x2e,
				0x30, 0x2e, 0x37, 0x20, 0x74, 0x6f, 0x20, 0x31,
				0x37, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x36, 0x31,
				0x2e, 0x30, 0x2f, 0x32, 0x34,
				// Node ID
				0x00, 0x3c, // IE Type: Node ID
				0x00, 0x05, 0x00, // IE Len + spare
				0xac, 0x10, 0x29, 0x33, // Node ID: 172.16.41.51
			},
		},
	}

	testutil.Run(t, cases, func(b []byte) (testutil.Serializable, error) {
		v, err := message.ParsePFDManagementRequest(b)
		if err != nil {
			return nil, err
		}
		v.Payload = nil
		return v, nil
	})
}
