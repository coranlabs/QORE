// Code generated by generate.sh, DO NOT EDIT.

package nasMessage

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/coranlabs/CORAN_LIB_NAS/nasType"
)

type SecurityModeComplete struct {
	nasType.ExtendedProtocolDiscriminator
	nasType.SpareHalfOctetAndSecurityHeaderType
	nasType.SecurityModeCompleteMessageIdentity
	*nasType.IMEISV
	*nasType.NASMessageContainer
}

func NewSecurityModeComplete(iei uint8) (securityModeComplete *SecurityModeComplete) {
	securityModeComplete = &SecurityModeComplete{}
	return securityModeComplete
}

const (
	SecurityModeCompleteIMEISVType              uint8 = 0x77
	SecurityModeCompleteNASMessageContainerType uint8 = 0x71
)

func (a *SecurityModeComplete) EncodeSecurityModeComplete(buffer *bytes.Buffer) error {
	if err := binary.Write(buffer, binary.BigEndian, a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS encode error (SecurityModeComplete/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS encode error (SecurityModeComplete/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SecurityModeCompleteMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS encode error (SecurityModeComplete/SecurityModeCompleteMessageIdentity): %w", err)
	}
	if a.IMEISV != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.IMEISV.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (SecurityModeComplete/IMEISV): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.IMEISV.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (SecurityModeComplete/IMEISV): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.IMEISV.Octet[:]); err != nil {
			return fmt.Errorf("NAS encode error (SecurityModeComplete/IMEISV): %w", err)
		}
	}
	if a.NASMessageContainer != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.NASMessageContainer.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (SecurityModeComplete/NASMessageContainer): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.NASMessageContainer.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (SecurityModeComplete/NASMessageContainer): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.NASMessageContainer.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (SecurityModeComplete/NASMessageContainer): %w", err)
		}
	}
	return nil
}

func (a *SecurityModeComplete) DecodeSecurityModeComplete(byteArray *[]byte) error {
	buffer := bytes.NewBuffer(*byteArray)
	if err := binary.Read(buffer, binary.BigEndian, &a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS decode error (SecurityModeComplete/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS decode error (SecurityModeComplete/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SecurityModeCompleteMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS decode error (SecurityModeComplete/SecurityModeCompleteMessageIdentity): %w", err)
	}
	for buffer.Len() > 0 {
		var ieiN uint8
		var tmpIeiN uint8
		if err := binary.Read(buffer, binary.BigEndian, &ieiN); err != nil {
			return fmt.Errorf("NAS decode error (SecurityModeComplete/iei): %w", err)
		}
		// fmt.Println(ieiN)
		if ieiN >= 0x80 {
			tmpIeiN = (ieiN & 0xf0) >> 4
		} else {
			tmpIeiN = ieiN
		}
		// fmt.Println("type", tmpIeiN)
		switch tmpIeiN {
		case SecurityModeCompleteIMEISVType:
			a.IMEISV = nasType.NewIMEISV(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.IMEISV.Len); err != nil {
				return fmt.Errorf("NAS decode error (SecurityModeComplete/IMEISV): %w", err)
			}
			if a.IMEISV.Len != 9 {
				return fmt.Errorf("invalid ie length (SecurityModeComplete/IMEISV): %d", a.IMEISV.Len)
			}
			a.IMEISV.SetLen(a.IMEISV.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.IMEISV.Octet[:]); err != nil {
				return fmt.Errorf("NAS decode error (SecurityModeComplete/IMEISV): %w", err)
			}
		case SecurityModeCompleteNASMessageContainerType:
			a.NASMessageContainer = nasType.NewNASMessageContainer(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.NASMessageContainer.Len); err != nil {
				return fmt.Errorf("NAS decode error (SecurityModeComplete/NASMessageContainer): %w", err)
			}
			if a.NASMessageContainer.Len < 1 {
				return fmt.Errorf("invalid ie length (SecurityModeComplete/NASMessageContainer): %d", a.NASMessageContainer.Len)
			}
			a.NASMessageContainer.SetLen(a.NASMessageContainer.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.NASMessageContainer.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (SecurityModeComplete/NASMessageContainer): %w", err)
			}
		default:
		}
	}
	return nil
}
