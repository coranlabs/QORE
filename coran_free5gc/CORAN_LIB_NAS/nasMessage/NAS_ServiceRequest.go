// Code generated by generate.sh, DO NOT EDIT.

package nasMessage

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/coranlabs/CORAN_LIB_NAS/nasType"
)

type ServiceRequest struct {
	nasType.ExtendedProtocolDiscriminator
	nasType.SpareHalfOctetAndSecurityHeaderType
	nasType.ServiceRequestMessageIdentity
	nasType.ServiceTypeAndNgksi
	nasType.TMSI5GS
	*nasType.UplinkDataStatus
	*nasType.PDUSessionStatus
	*nasType.AllowedPDUSessionStatus
	*nasType.NASMessageContainer
}

func NewServiceRequest(iei uint8) (serviceRequest *ServiceRequest) {
	serviceRequest = &ServiceRequest{}
	return serviceRequest
}

const (
	ServiceRequestUplinkDataStatusType        uint8 = 0x40
	ServiceRequestPDUSessionStatusType        uint8 = 0x50
	ServiceRequestAllowedPDUSessionStatusType uint8 = 0x25
	ServiceRequestNASMessageContainerType     uint8 = 0x71
)

func (a *ServiceRequest) EncodeServiceRequest(buffer *bytes.Buffer) error {
	if err := binary.Write(buffer, binary.BigEndian, a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS encode error (ServiceRequest/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS encode error (ServiceRequest/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.ServiceRequestMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS encode error (ServiceRequest/ServiceRequestMessageIdentity): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.ServiceTypeAndNgksi.Octet); err != nil {
		return fmt.Errorf("NAS encode error (ServiceRequest/ServiceTypeAndNgksi): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.TMSI5GS.GetLen()); err != nil {
		return fmt.Errorf("NAS encode error (ServiceRequest/TMSI5GS): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.TMSI5GS.Octet[:]); err != nil {
		return fmt.Errorf("NAS encode error (ServiceRequest/TMSI5GS): %w", err)
	}
	if a.UplinkDataStatus != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.UplinkDataStatus.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/UplinkDataStatus): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.UplinkDataStatus.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/UplinkDataStatus): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.UplinkDataStatus.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/UplinkDataStatus): %w", err)
		}
	}
	if a.PDUSessionStatus != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.PDUSessionStatus.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/PDUSessionStatus): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.PDUSessionStatus.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/PDUSessionStatus): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.PDUSessionStatus.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/PDUSessionStatus): %w", err)
		}
	}
	if a.AllowedPDUSessionStatus != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.AllowedPDUSessionStatus.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/AllowedPDUSessionStatus): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.AllowedPDUSessionStatus.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/AllowedPDUSessionStatus): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.AllowedPDUSessionStatus.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/AllowedPDUSessionStatus): %w", err)
		}
	}
	if a.NASMessageContainer != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.NASMessageContainer.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/NASMessageContainer): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.NASMessageContainer.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/NASMessageContainer): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.NASMessageContainer.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (ServiceRequest/NASMessageContainer): %w", err)
		}
	}
	return nil
}

func (a *ServiceRequest) DecodeServiceRequest(byteArray *[]byte) error {
	buffer := bytes.NewBuffer(*byteArray)
	if err := binary.Read(buffer, binary.BigEndian, &a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS decode error (ServiceRequest/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS decode error (ServiceRequest/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.ServiceRequestMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS decode error (ServiceRequest/ServiceRequestMessageIdentity): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.ServiceTypeAndNgksi.Octet); err != nil {
		return fmt.Errorf("NAS decode error (ServiceRequest/ServiceTypeAndNgksi): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.TMSI5GS.Len); err != nil {
		return fmt.Errorf("NAS decode error (ServiceRequest/TMSI5GS): %w", err)
	}
	if a.TMSI5GS.Len != 7 {
		return fmt.Errorf("invalid ie length (ServiceRequest/TMSI5GS): %d", a.TMSI5GS.Len)
	}
	a.TMSI5GS.SetLen(a.TMSI5GS.GetLen())
	if err := binary.Read(buffer, binary.BigEndian, a.TMSI5GS.Octet[:]); err != nil {
		return fmt.Errorf("NAS decode error (ServiceRequest/TMSI5GS): %w", err)
	}
	for buffer.Len() > 0 {
		var ieiN uint8
		var tmpIeiN uint8
		if err := binary.Read(buffer, binary.BigEndian, &ieiN); err != nil {
			return fmt.Errorf("NAS decode error (ServiceRequest/iei): %w", err)
		}
		// fmt.Println(ieiN)
		if ieiN >= 0x80 {
			tmpIeiN = (ieiN & 0xf0) >> 4
		} else {
			tmpIeiN = ieiN
		}
		// fmt.Println("type", tmpIeiN)
		switch tmpIeiN {
		case ServiceRequestUplinkDataStatusType:
			a.UplinkDataStatus = nasType.NewUplinkDataStatus(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.UplinkDataStatus.Len); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/UplinkDataStatus): %w", err)
			}
			if a.UplinkDataStatus.Len < 2 || a.UplinkDataStatus.Len > 32 {
				return fmt.Errorf("invalid ie length (ServiceRequest/UplinkDataStatus): %d", a.UplinkDataStatus.Len)
			}
			a.UplinkDataStatus.SetLen(a.UplinkDataStatus.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.UplinkDataStatus.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/UplinkDataStatus): %w", err)
			}
		case ServiceRequestPDUSessionStatusType:
			a.PDUSessionStatus = nasType.NewPDUSessionStatus(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.PDUSessionStatus.Len); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/PDUSessionStatus): %w", err)
			}
			if a.PDUSessionStatus.Len < 2 || a.PDUSessionStatus.Len > 32 {
				return fmt.Errorf("invalid ie length (ServiceRequest/PDUSessionStatus): %d", a.PDUSessionStatus.Len)
			}
			a.PDUSessionStatus.SetLen(a.PDUSessionStatus.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.PDUSessionStatus.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/PDUSessionStatus): %w", err)
			}
		case ServiceRequestAllowedPDUSessionStatusType:
			a.AllowedPDUSessionStatus = nasType.NewAllowedPDUSessionStatus(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.AllowedPDUSessionStatus.Len); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/AllowedPDUSessionStatus): %w", err)
			}
			if a.AllowedPDUSessionStatus.Len < 2 || a.AllowedPDUSessionStatus.Len > 32 {
				return fmt.Errorf("invalid ie length (ServiceRequest/AllowedPDUSessionStatus): %d", a.AllowedPDUSessionStatus.Len)
			}
			a.AllowedPDUSessionStatus.SetLen(a.AllowedPDUSessionStatus.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.AllowedPDUSessionStatus.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/AllowedPDUSessionStatus): %w", err)
			}
		case ServiceRequestNASMessageContainerType:
			a.NASMessageContainer = nasType.NewNASMessageContainer(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.NASMessageContainer.Len); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/NASMessageContainer): %w", err)
			}
			if a.NASMessageContainer.Len < 1 {
				return fmt.Errorf("invalid ie length (ServiceRequest/NASMessageContainer): %d", a.NASMessageContainer.Len)
			}
			a.NASMessageContainer.SetLen(a.NASMessageContainer.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.NASMessageContainer.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (ServiceRequest/NASMessageContainer): %w", err)
			}
		default:
		}
	}
	return nil
}
