// Code generated by generate.sh, DO NOT EDIT.

package nasMessage

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/coranlabs/CORAN_LIB_NAS/nasType"
)

type DLNASTransport struct {
	nasType.ExtendedProtocolDiscriminator
	nasType.SpareHalfOctetAndSecurityHeaderType
	nasType.DLNASTRANSPORTMessageIdentity
	nasType.SpareHalfOctetAndPayloadContainerType
	nasType.PayloadContainer
	*nasType.PduSessionID2Value
	*nasType.AdditionalInformation
	*nasType.Cause5GMM
	*nasType.BackoffTimerValue
}

func NewDLNASTransport(iei uint8) (dLNASTransport *DLNASTransport) {
	dLNASTransport = &DLNASTransport{}
	return dLNASTransport
}

const (
	DLNASTransportPduSessionID2ValueType    uint8 = 0x12
	DLNASTransportAdditionalInformationType uint8 = 0x24
	DLNASTransportCause5GMMType             uint8 = 0x58
	DLNASTransportBackoffTimerValueType     uint8 = 0x37
)

func (a *DLNASTransport) EncodeDLNASTransport(buffer *bytes.Buffer) error {
	if err := binary.Write(buffer, binary.BigEndian, a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS encode error (DLNASTransport/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS encode error (DLNASTransport/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.DLNASTRANSPORTMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS encode error (DLNASTransport/DLNASTRANSPORTMessageIdentity): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SpareHalfOctetAndPayloadContainerType.Octet); err != nil {
		return fmt.Errorf("NAS encode error (DLNASTransport/SpareHalfOctetAndPayloadContainerType): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.PayloadContainer.GetLen()); err != nil {
		return fmt.Errorf("NAS encode error (DLNASTransport/PayloadContainer): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.PayloadContainer.Buffer); err != nil {
		return fmt.Errorf("NAS encode error (DLNASTransport/PayloadContainer): %w", err)
	}
	if a.PduSessionID2Value != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.PduSessionID2Value.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/PduSessionID2Value): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.PduSessionID2Value.Octet); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/PduSessionID2Value): %w", err)
		}
	}
	if a.AdditionalInformation != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.AdditionalInformation.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/AdditionalInformation): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.AdditionalInformation.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/AdditionalInformation): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.AdditionalInformation.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/AdditionalInformation): %w", err)
		}
	}
	if a.Cause5GMM != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.Cause5GMM.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/Cause5GMM): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.Cause5GMM.Octet); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/Cause5GMM): %w", err)
		}
	}
	if a.BackoffTimerValue != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.BackoffTimerValue.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/BackoffTimerValue): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.BackoffTimerValue.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/BackoffTimerValue): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.BackoffTimerValue.Octet); err != nil {
			return fmt.Errorf("NAS encode error (DLNASTransport/BackoffTimerValue): %w", err)
		}
	}
	return nil
}

func (a *DLNASTransport) DecodeDLNASTransport(byteArray *[]byte) error {
	buffer := bytes.NewBuffer(*byteArray)
	if err := binary.Read(buffer, binary.BigEndian, &a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS decode error (DLNASTransport/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS decode error (DLNASTransport/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.DLNASTRANSPORTMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS decode error (DLNASTransport/DLNASTRANSPORTMessageIdentity): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndPayloadContainerType.Octet); err != nil {
		return fmt.Errorf("NAS decode error (DLNASTransport/SpareHalfOctetAndPayloadContainerType): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.PayloadContainer.Len); err != nil {
		return fmt.Errorf("NAS decode error (DLNASTransport/PayloadContainer): %w", err)
	}
	if a.PayloadContainer.Len < 1 {
		return fmt.Errorf("invalid ie length (DLNASTransport/PayloadContainer): %d", a.PayloadContainer.Len)
	}
	a.PayloadContainer.SetLen(a.PayloadContainer.GetLen())
	if err := binary.Read(buffer, binary.BigEndian, a.PayloadContainer.Buffer); err != nil {
		return fmt.Errorf("NAS decode error (DLNASTransport/PayloadContainer): %w", err)
	}
	for buffer.Len() > 0 {
		var ieiN uint8
		var tmpIeiN uint8
		if err := binary.Read(buffer, binary.BigEndian, &ieiN); err != nil {
			return fmt.Errorf("NAS decode error (DLNASTransport/iei): %w", err)
		}
		// fmt.Println(ieiN)
		if ieiN >= 0x80 {
			tmpIeiN = (ieiN & 0xf0) >> 4
		} else {
			tmpIeiN = ieiN
		}
		// fmt.Println("type", tmpIeiN)
		switch tmpIeiN {
		case DLNASTransportPduSessionID2ValueType:
			a.PduSessionID2Value = nasType.NewPduSessionID2Value(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.PduSessionID2Value.Octet); err != nil {
				return fmt.Errorf("NAS decode error (DLNASTransport/PduSessionID2Value): %w", err)
			}
		case DLNASTransportAdditionalInformationType:
			a.AdditionalInformation = nasType.NewAdditionalInformation(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.AdditionalInformation.Len); err != nil {
				return fmt.Errorf("NAS decode error (DLNASTransport/AdditionalInformation): %w", err)
			}
			if a.AdditionalInformation.Len < 1 {
				return fmt.Errorf("invalid ie length (DLNASTransport/AdditionalInformation): %d", a.AdditionalInformation.Len)
			}
			a.AdditionalInformation.SetLen(a.AdditionalInformation.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.AdditionalInformation.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (DLNASTransport/AdditionalInformation): %w", err)
			}
		case DLNASTransportCause5GMMType:
			a.Cause5GMM = nasType.NewCause5GMM(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.Cause5GMM.Octet); err != nil {
				return fmt.Errorf("NAS decode error (DLNASTransport/Cause5GMM): %w", err)
			}
		case DLNASTransportBackoffTimerValueType:
			a.BackoffTimerValue = nasType.NewBackoffTimerValue(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.BackoffTimerValue.Len); err != nil {
				return fmt.Errorf("NAS decode error (DLNASTransport/BackoffTimerValue): %w", err)
			}
			if a.BackoffTimerValue.Len != 1 {
				return fmt.Errorf("invalid ie length (DLNASTransport/BackoffTimerValue): %d", a.BackoffTimerValue.Len)
			}
			a.BackoffTimerValue.SetLen(a.BackoffTimerValue.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, &a.BackoffTimerValue.Octet); err != nil {
				return fmt.Errorf("NAS decode error (DLNASTransport/BackoffTimerValue): %w", err)
			}
		default:
		}
	}
	return nil
}
