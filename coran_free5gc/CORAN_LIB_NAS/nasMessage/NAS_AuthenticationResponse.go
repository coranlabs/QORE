// Code generated by generate.sh, DO NOT EDIT.

package nasMessage

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/coranlabs/CORAN_LIB_NAS/nasType"
)

type AuthenticationResponse struct {
	nasType.ExtendedProtocolDiscriminator
	nasType.SpareHalfOctetAndSecurityHeaderType
	nasType.AuthenticationResponseMessageIdentity
	*nasType.AuthenticationResponseParameter
	*nasType.EAPMessage
}

func NewAuthenticationResponse(iei uint8) (authenticationResponse *AuthenticationResponse) {
	authenticationResponse = &AuthenticationResponse{}
	return authenticationResponse
}

const (
	AuthenticationResponseAuthenticationResponseParameterType uint8 = 0x2D
	AuthenticationResponseEAPMessageType                      uint8 = 0x78
)

func (a *AuthenticationResponse) EncodeAuthenticationResponse(buffer *bytes.Buffer) error {
	if err := binary.Write(buffer, binary.BigEndian, a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS encode error (AuthenticationResponse/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS encode error (AuthenticationResponse/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Write(buffer, binary.BigEndian, a.AuthenticationResponseMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS encode error (AuthenticationResponse/AuthenticationResponseMessageIdentity): %w", err)
	}
	if a.AuthenticationResponseParameter != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.AuthenticationResponseParameter.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (AuthenticationResponse/AuthenticationResponseParameter): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.AuthenticationResponseParameter.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (AuthenticationResponse/AuthenticationResponseParameter): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.AuthenticationResponseParameter.Octet[:]); err != nil {
			return fmt.Errorf("NAS encode error (AuthenticationResponse/AuthenticationResponseParameter): %w", err)
		}
	}
	if a.EAPMessage != nil {
		if err := binary.Write(buffer, binary.BigEndian, a.EAPMessage.GetIei()); err != nil {
			return fmt.Errorf("NAS encode error (AuthenticationResponse/EAPMessage): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.EAPMessage.GetLen()); err != nil {
			return fmt.Errorf("NAS encode error (AuthenticationResponse/EAPMessage): %w", err)
		}
		if err := binary.Write(buffer, binary.BigEndian, a.EAPMessage.Buffer); err != nil {
			return fmt.Errorf("NAS encode error (AuthenticationResponse/EAPMessage): %w", err)
		}
	}
	return nil
}

func (a *AuthenticationResponse) DecodeAuthenticationResponse(byteArray *[]byte) error {
	buffer := bytes.NewBuffer(*byteArray)
	if err := binary.Read(buffer, binary.BigEndian, &a.ExtendedProtocolDiscriminator.Octet); err != nil {
		return fmt.Errorf("NAS decode error (AuthenticationResponse/ExtendedProtocolDiscriminator): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndSecurityHeaderType.Octet); err != nil {
		return fmt.Errorf("NAS decode error (AuthenticationResponse/SpareHalfOctetAndSecurityHeaderType): %w", err)
	}
	if err := binary.Read(buffer, binary.BigEndian, &a.AuthenticationResponseMessageIdentity.Octet); err != nil {
		return fmt.Errorf("NAS decode error (AuthenticationResponse/AuthenticationResponseMessageIdentity): %w", err)
	}
	for buffer.Len() > 0 {
		var ieiN uint8
		var tmpIeiN uint8
		if err := binary.Read(buffer, binary.BigEndian, &ieiN); err != nil {
			return fmt.Errorf("NAS decode error (AuthenticationResponse/iei): %w", err)
		}
		// fmt.Println(ieiN)
		if ieiN >= 0x80 {
			tmpIeiN = (ieiN & 0xf0) >> 4
		} else {
			tmpIeiN = ieiN
		}
		// fmt.Println("type", tmpIeiN)
		switch tmpIeiN {
		case AuthenticationResponseAuthenticationResponseParameterType:
			a.AuthenticationResponseParameter = nasType.NewAuthenticationResponseParameter(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.AuthenticationResponseParameter.Len); err != nil {
				return fmt.Errorf("NAS decode error (AuthenticationResponse/AuthenticationResponseParameter): %w", err)
			}
			if a.AuthenticationResponseParameter.Len != 16 {
				return fmt.Errorf("invalid ie length (AuthenticationResponse/AuthenticationResponseParameter): %d", a.AuthenticationResponseParameter.Len)
			}
			a.AuthenticationResponseParameter.SetLen(a.AuthenticationResponseParameter.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.AuthenticationResponseParameter.Octet[:]); err != nil {
				return fmt.Errorf("NAS decode error (AuthenticationResponse/AuthenticationResponseParameter): %w", err)
			}
		case AuthenticationResponseEAPMessageType:
			a.EAPMessage = nasType.NewEAPMessage(ieiN)
			if err := binary.Read(buffer, binary.BigEndian, &a.EAPMessage.Len); err != nil {
				return fmt.Errorf("NAS decode error (AuthenticationResponse/EAPMessage): %w", err)
			}
			if a.EAPMessage.Len < 4 || a.EAPMessage.Len > 1500 {
				return fmt.Errorf("invalid ie length (AuthenticationResponse/EAPMessage): %d", a.EAPMessage.Len)
			}
			a.EAPMessage.SetLen(a.EAPMessage.GetLen())
			if err := binary.Read(buffer, binary.BigEndian, a.EAPMessage.Buffer); err != nil {
				return fmt.Errorf("NAS decode error (AuthenticationResponse/EAPMessage): %w", err)
			}
		default:
		}
	}
	return nil
}
