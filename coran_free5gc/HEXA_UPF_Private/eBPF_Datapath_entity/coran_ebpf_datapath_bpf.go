// Code generated by bpf2go; DO NOT EDIT.

package ebpf_datapath

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Coran_ebpf_datapathFAR struct {
	Action   uint8
	OHC      uint8
	_        [2]byte
	TEID     uint32
	Remoteip uint32
	Localip  uint32
	TLM      uint16
	_        [2]byte
}

type Coran_ebpf_datapathMacAddress struct{ MacAddress [6]uint8 }

type Coran_ebpf_datapathPDR struct {
	FarId uint32
	QerId uint32
	OHR   uint8
	_     [3]byte
}

type Coran_ebpf_datapathQER struct {
	ULGateStatus uint8
	DLGateStatus uint8
	Qfi          uint8
	_            [1]byte
	ULMaxBitrate uint32
	DLMaxBitrate uint32
	_            [4]byte
	UlStart      uint64
	DlStart      uint64
}

type Coran_ebpf_datapathUPF_INTERFACES uint32

// LoadCoran_ebpf_datapath returns the embedded CollectionSpec for Coran_ebpf_datapath.
func LoadCoran_ebpf_datapath() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Coran_ebpf_datapathBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Coran_ebpf_datapath: %w", err)
	}

	return spec, err
}

// LoadCoran_ebpf_datapathObjects loads Coran_ebpf_datapath and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Coran_ebpf_datapathObjects
//	*Coran_ebpf_datapathPrograms
//	*Coran_ebpf_datapathMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadCoran_ebpf_datapathObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadCoran_ebpf_datapath()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Coran_ebpf_datapathSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Coran_ebpf_datapathSpecs struct {
	Coran_ebpf_datapathProgramSpecs
	Coran_ebpf_datapathMapSpecs
}

// Coran_ebpf_datapathSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Coran_ebpf_datapathProgramSpecs struct {
	HexaDatapathEntrypoint *ebpf.ProgramSpec `ebpf:"Hexa_datapath_entrypoint"`
}

// Coran_ebpf_datapathMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Coran_ebpf_datapathMapSpecs struct {
	ArpMap          *ebpf.MapSpec `ebpf:"Arp_map"`
	FAR_map         *ebpf.MapSpec `ebpf:"FAR_map"`
	PDR_downlinkMap *ebpf.MapSpec `ebpf:"PDR_downlink_map"`
	PDR_uplinkMap   *ebpf.MapSpec `ebpf:"PDR_uplink_map"`
	QER_map         *ebpf.MapSpec `ebpf:"QER_map"`
}

// Coran_ebpf_datapathObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadCoran_ebpf_datapathObjects or ebpf.CollectionSpec.LoadAndAssign.
type Coran_ebpf_datapathObjects struct {
	Coran_ebpf_datapathPrograms
	Coran_ebpf_datapathMaps
}

func (o *Coran_ebpf_datapathObjects) Close() error {
	return _Coran_ebpf_datapathClose(
		&o.Coran_ebpf_datapathPrograms,
		&o.Coran_ebpf_datapathMaps,
	)
}

// Coran_ebpf_datapathMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadCoran_ebpf_datapathObjects or ebpf.CollectionSpec.LoadAndAssign.
type Coran_ebpf_datapathMaps struct {
	ArpMap          *ebpf.Map `ebpf:"Arp_map"`
	FAR_map         *ebpf.Map `ebpf:"FAR_map"`
	PDR_downlinkMap *ebpf.Map `ebpf:"PDR_downlink_map"`
	PDR_uplinkMap   *ebpf.Map `ebpf:"PDR_uplink_map"`
	QER_map         *ebpf.Map `ebpf:"QER_map"`
}

func (m *Coran_ebpf_datapathMaps) Close() error {
	return _Coran_ebpf_datapathClose(
		m.ArpMap,
		m.FAR_map,
		m.PDR_downlinkMap,
		m.PDR_uplinkMap,
		m.QER_map,
	)
}

// Coran_ebpf_datapathPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadCoran_ebpf_datapathObjects or ebpf.CollectionSpec.LoadAndAssign.
type Coran_ebpf_datapathPrograms struct {
	HexaDatapathEntrypoint *ebpf.Program `ebpf:"Hexa_datapath_entrypoint"`
}

func (p *Coran_ebpf_datapathPrograms) Close() error {
	return _Coran_ebpf_datapathClose(
		p.HexaDatapathEntrypoint,
	)
}

func _Coran_ebpf_datapathClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed coran_ebpf_datapath_bpf.o
var _Coran_ebpf_datapathBytes []byte
