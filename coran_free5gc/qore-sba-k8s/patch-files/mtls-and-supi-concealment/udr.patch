diff --git a/.netrc b/.netrc
index be78029..a1ccd4b 100644
--- a/.netrc
+++ b/.netrc
@@ -1,3 +1,3 @@
 # .netrc
 ## generate token with https://help.github.com/articles/creating-an-oauth-token-for-command-line-use
-machine github.com login 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
\ No newline at end of file
+machine github.com login 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
diff --git a/Application_entity/server/sbi/server.go b/Application_entity/server/sbi/server.go
index efe87a5..a1bfab0 100644
--- a/Application_entity/server/sbi/server.go
+++ b/Application_entity/server/sbi/server.go
@@ -2,7 +2,9 @@ package sbi
 
 import (
 	"context"
+	"crypto/tls"
 	"fmt"
+	"log"
 	"net/http"
 	"sync"
 	"time"
@@ -14,10 +16,10 @@ import (
 	"github.com/coranlabs/CORAN_UDR/Application_entity/pkg/factory"
 	processor "github.com/coranlabs/CORAN_UDR/Application_entity/server/sbi/processor"
 
-	"github.com/coranlabs/CORAN_LIB_UTIL/httpwrapper"
 	logger_util "github.com/coranlabs/CORAN_LIB_UTIL/logger"
 	"github.com/coranlabs/CORAN_UDR/Application_entity/logger"
 	"github.com/coranlabs/CORAN_UDR/Application_entity/server/util"
+	"github.com/lakshya-chopra/httpwrapper"
 )
 
 type Server struct {
@@ -39,7 +41,13 @@ func NewServer(udr UDR, tlsKeyLogPath string) *Server {
 	}
 
 	s.router = newRouter(s)
-	server, err := bindRouter(udr, s.router, tlsKeyLogPath)
+
+	server_cert, err1 := tls.LoadX509KeyPair(factory.UdrConfig.GetCertPemPath(), factory.UdrConfig.GetCertKeyPath())
+
+	if err1 != nil {
+		log.Fatal(err1)
+	}
+	server, err := bindRouter(udr, s.router, tlsKeyLogPath, server_cert)
 	s.httpServer = server
 
 	if err != nil {
@@ -85,11 +93,11 @@ func (s *Server) shutdownHttpServer() {
 	}
 }
 
-func bindRouter(udr app.App, router *gin.Engine, tlsKeyLogPath string) (*http.Server, error) {
+func bindRouter(udr app.App, router *gin.Engine, tlsKeyLogPath string, cert tls.Certificate) (*http.Server, error) {
 	sbiConfig := udr.Config().Configuration.Sbi
 	bindAddr := fmt.Sprintf("%s:%d", sbiConfig.BindingIPv4, sbiConfig.Port)
 
-	return httpwrapper.NewHttp2Server(bindAddr, tlsKeyLogPath, router)
+	return httpwrapper.NewHttp2Server(bindAddr, tlsKeyLogPath, router, cert)
 }
 
 func newRouter(s *Server) *gin.Engine {
diff --git a/Dockerfile b/Dockerfile
index 0c8fd6f..48972a7 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,11 +1,37 @@
 # Stage 1
-FROM golang:1.23.0-alpine AS builder
+FROM golang:1.23.0-bullseye AS builder
 WORKDIR /udr
 COPY .netrc /root/.netrc
 COPY . /udr
-RUN apk add --no-cache git
+RUN apt install git
 RUN go env -w GOPRIVATE=github.com/coranlabs
 RUN go mod download
+
+# RUN git clone https://github.com/lakshya-chopra/go /cloudflare-go
+# WORKDIR /cloudflare-go/src
+# RUN ./make.bash
+
+# ENV GOROOT /cloudflare-go 
+# ENV PATH $GOROOT/bin:$GOPATH/bin:$PATH
+# ENV go /cloudflare-go/bin/go
+
+RUN mkdir -p /go-1.23
+RUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \
+    && tar -C /go-1.23 -xzf go1.23.0.linux-amd64.tar.gz
+ENV GOROOT_BOOTSTRAP=/go-1.23/go
+
+
+RUN git clone https://github.com/lakshya-chopra/go /cloudflare-go
+RUN rm -rf /usr/local/go/src/crypto
+RUN rm -rf /usr/local/go/src/vendor
+RUN cp /cloudflare-go/src/crypto -R /usr/local/go/src/crypto
+RUN cp /cloudflare-go/src/vendor -R /usr/local/go/src/vendor
+WORKDIR /usr/local/go/src/
+
+RUN ./make.bash
+
+WORKDIR /udr
+
 RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o udr ./main.go
 
 # Stage 2
diff --git a/go.mod b/go.mod
index f09ef45..2ed8bfd 100644
--- a/go.mod
+++ b/go.mod
@@ -43,6 +43,7 @@ require (
 	github.com/json-iterator/go v1.1.12 // indirect
 	github.com/klauspost/compress v1.17.2 // indirect
 	github.com/klauspost/cpuid/v2 v2.2.7 // indirect
+	github.com/lakshya-chopra/httpwrapper v0.0.1 // indirect
 	github.com/leodido/go-urn v1.4.0 // indirect
 	github.com/magiconair/properties v1.8.7 // indirect
 	github.com/mattn/go-isatty v0.0.20 // indirect
diff --git a/go.sum b/go.sum
index e8852f1..05de4ae 100644
--- a/go.sum
+++ b/go.sum
@@ -73,6 +73,8 @@ github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
 github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/lakshya-chopra/httpwrapper v0.0.1 h1:bnb2eYQBsYMX/gUr8uhSNxbjVfK/04EEozx9uA/gnqk=
+github.com/lakshya-chopra/httpwrapper v0.0.1/go.mod h1:zrgSmzr/IuUxKZAzaBELxyf3PgjhNn4gu8ppVbLr4OY=
 github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
 github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
 github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=
