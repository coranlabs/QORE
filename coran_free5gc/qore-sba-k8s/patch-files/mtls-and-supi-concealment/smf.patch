From 7a310dc0802c94545b2726e30051d903d30c20af Mon Sep 17 00:00:00 2001
From: Lakshya Chopra <lakshyachopra2707@gmail.com>
Date: Wed, 13 Nov 2024 18:01:35 +0000
Subject: [PATCH] ADD: PQ-mTLS

---
 .netrc                                        |   2 +-
 .../server/sbi/processor/pdu_session_test.go  | 658 ------------------
 Application_entity/server/sbi/server.go       |  12 +-
 Dockerfile                                    |  31 +-
 go.mod                                        |   1 +
 go.sum                                        |   2 +
 6 files changed, 43 insertions(+), 663 deletions(-)
 delete mode 100644 Application_entity/server/sbi/processor/pdu_session_test.go

diff --git a/.netrc b/.netrc
index 8cb57e0..3a4960d 100644
--- a/.netrc
+++ b/.netrc
@@ -1,4 +1,4 @@
 # .netrc
 ## generate token with https://help.github.com/articles/creating-an-oauth-token-for-command-line-use
-machine github.com login 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
+machine github.com login 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
 
diff --git a/Application_entity/server/sbi/processor/pdu_session_test.go b/Application_entity/server/sbi/processor/pdu_session_test.go
deleted file mode 100644
index 41c109a..0000000
--- a/Application_entity/server/sbi/processor/pdu_session_test.go
+++ /dev/null
@@ -1,658 +0,0 @@
-package processor_test
-
-import (
-	"context"
-	"encoding/json"
-	"io"
-	"net/http"
-	"net/http/httptest"
-	"testing"
-	"time"
-
-	nas "github.com/coranlabs/CORAN_LIB_NAS"
-	"github.com/gin-gonic/gin"
-	"github.com/stretchr/testify/require"
-	"go.uber.org/mock/gomock"
-	"gopkg.in/h2non/gock.v1"
-
-	"github.com/coranlabs/CORAN_LIB_NAS/nasMessage"
-	"github.com/coranlabs/CORAN_LIB_NAS/nasType"
-	openapi "github.com/coranlabs/CORAN_LIB_OPENAPI"
-	"github.com/coranlabs/CORAN_LIB_OPENAPI/Nsmf_PDUSession"
-	"github.com/coranlabs/CORAN_LIB_OPENAPI/models"
-	"github.com/coranlabs/CORAN_LIB_UTIL/httpwrapper"
-	"github.com/coranlabs/CORAN_SMF/Application_entity/pkg/factory"
-	"github.com/coranlabs/CORAN_SMF/Application_entity/pkg/service"
-	"github.com/coranlabs/CORAN_SMF/Application_entity/server/sbi/consumer"
-	"github.com/coranlabs/CORAN_SMF/Application_entity/server/sbi/processor"
-	smf_context "github.com/coranlabs/CORAN_SMF/Messages_handling_entity/context"
-	"github.com/coranlabs/CORAN_SMF/Messages_handling_entity/pfcp"
-	"github.com/coranlabs/CORAN_SMF/Messages_handling_entity/pfcp/udp"
-)
-
-var userPlaneConfig = factory.UserPlaneInformation{
-	UPNodes: map[string]*factory.UPNode{
-		"GNodeB": {
-			Type: "AN",
-		},
-		"UPF1": {
-			Type:   "UPF",
-			NodeID: "192.168.179.1",
-			SNssaiInfos: []*factory.SnssaiUpfInfoItem{
-				{
-					SNssai: &models.Snssai{
-						Sst: 1,
-						Sd:  "112232",
-					},
-					DnnUpfInfoList: []*factory.DnnUpfInfoItem{
-						{
-							Dnn: "internet",
-							Pools: []*factory.UEIPPool{
-								{Cidr: "10.60.0.0/16"},
-							},
-						},
-					},
-				},
-			},
-			InterfaceUpfInfoList: []*factory.InterfaceUpfInfoItem{
-				{
-					InterfaceType: "N3",
-					Endpoints: []string{
-						"127.0.0.8",
-					},
-					NetworkInstances: []string{"internet"},
-				},
-			},
-		},
-	},
-	Links: []*factory.UPLink{
-		{
-			A: "GNodeB",
-			B: "UPF1",
-		},
-	},
-}
-
-var testConfig = factory.Config{
-	Info: &factory.Info{
-		Version:     "1.0.0",
-		Description: "SMF procdeure test configuration",
-	},
-	Configuration: &factory.Configuration{
-		SmfName: "SMF Procedure Test",
-		Sbi: &factory.Sbi{
-			Scheme:       "http",
-			RegisterIPv4: "127.0.0.1",
-			BindingIPv4:  "127.0.0.1",
-			Port:         8000,
-		},
-		PFCP: &factory.PFCP{
-			ListenAddr:   "127.0.0.1",
-			ExternalAddr: "127.0.0.1",
-			NodeID:       "127.0.0.1",
-		},
-		NrfUri:               "http://127.0.0.10:8000",
-		UserPlaneInformation: userPlaneConfig,
-		ServiceNameList: []string{
-			"nsmf-pdusession",
-			"nsmf-event-exposure",
-			"nsmf-oam",
-		},
-		SNssaiInfo: []*factory.SnssaiInfoItem{
-			{
-				SNssai: &models.Snssai{
-					Sst: 1,
-					Sd:  "112232",
-				},
-				DnnInfos: []*factory.SnssaiDnnInfoItem{
-					{
-						Dnn: "internet",
-						DNS: &factory.DNS{
-							IPv4Addr: "8.8.8.8",
-							IPv6Addr: "2001:4860:4860::8888",
-						},
-					},
-				},
-			},
-		},
-	},
-}
-
-func initConfig() {
-	smf_context.InitSmfContext(&testConfig)
-	factory.SmfConfig = &testConfig
-}
-
-func initDiscUDMStubNRF() {
-	searchResult := &models.SearchResult{
-		ValidityPeriod: 100,
-		NfInstances: []models.NfProfile{
-			{
-				NfInstanceId: "smf-unit-testing",
-				NfType:       "UDM",
-				NfStatus:     "REGISTERED",
-				PlmnList: &[]models.PlmnId{
-					{
-						Mcc: "208",
-						Mnc: "93",
-					},
-				},
-				Ipv4Addresses: []string{
-					"127.0.0.3",
-				},
-				NfServices: &[]models.NfService{
-					{
-						ServiceInstanceId: "0",
-						ServiceName:       "nudm-sdm",
-						Versions: &[]models.NfServiceVersion{
-							{
-								ApiVersionInUri: "v1",
-								ApiFullVersion:  "1.0.0",
-							},
-						},
-						Scheme:          "http",
-						NfServiceStatus: "REGISTERED",
-						IpEndPoints: &[]models.IpEndPoint{
-							{
-								Ipv4Address: "127.0.0.3",
-								Transport:   "TCP",
-								Port:        8000,
-							},
-						},
-						ApiPrefix: "http://127.0.0.3:8000",
-					},
-				},
-			},
-		},
-	}
-
-	gock.New("http://127.0.0.10:8000"+factory.NrfDiscUriPrefix).
-		Get("/nf-instances").
-		MatchParam("target-nf-type", "UDM").
-		MatchParam("requester-nf-type", "SMF").
-		Reply(http.StatusOK).
-		JSON(searchResult)
-}
-
-func initDiscPCFStubNRF() {
-	searchResult := &models.SearchResult{
-		ValidityPeriod: 100,
-		NfInstances: []models.NfProfile{
-			{
-				NfInstanceId: "smf-unit-testing",
-				NfType:       "PCF",
-				NfStatus:     "REGISTERED",
-				PlmnList: &[]models.PlmnId{
-					{
-						Mcc: "208",
-						Mnc: "93",
-					},
-				},
-				Ipv4Addresses: []string{
-					"127.0.0.7",
-				},
-				PcfInfo: &models.PcfInfo{
-					DnnList: []string{
-						"coranlabs",
-						"internet",
-					},
-				},
-				NfServices: &[]models.NfService{
-					{
-						ServiceInstanceId: "1",
-						ServiceName:       "npcf-smpolicycontrol",
-						Versions: &[]models.NfServiceVersion{
-							{
-								ApiVersionInUri: "v1",
-								ApiFullVersion:  "1.0.0",
-							},
-						},
-						Scheme:          "http",
-						NfServiceStatus: "REGISTERED",
-						IpEndPoints: &[]models.IpEndPoint{
-							{
-								Ipv4Address: "127.0.0.7",
-								Transport:   "TCP",
-								Port:        8000,
-							},
-						},
-						ApiPrefix: "http://127.0.0.7:8000",
-					},
-				},
-			},
-		},
-	}
-
-	gock.New("http://127.0.0.10:8000"+factory.NrfDiscUriPrefix).
-		Get("/nf-instances").
-		MatchParam("target-nf-type", "PCF").
-		MatchParam("requester-nf-type", "SMF").
-		Reply(http.StatusOK).
-		JSON(searchResult)
-}
-
-func initGetSMDataStubUDM() {
-	SMSubscriptionData := []models.SessionManagementSubscriptionData{
-		{
-			SingleNssai: &models.Snssai{
-				Sst: 1,
-				Sd:  "112232",
-			},
-			DnnConfigurations: map[string]models.DnnConfiguration{
-				"internet": {
-					PduSessionTypes: &models.PduSessionTypes{
-						DefaultSessionType: "IPV4",
-						AllowedSessionTypes: []models.PduSessionType{
-							"IPV4",
-						},
-					},
-					SscModes: &models.SscModes{
-						DefaultSscMode: "SSC_MODE_1",
-						AllowedSscModes: []models.SscMode{
-							"SSC_MODE_1",
-							"SSC_MODE_2",
-							"SSC_MODE_3",
-						},
-					},
-					Var5gQosProfile: &models.SubscribedDefaultQos{
-						Var5qi: 9,
-						Arp: &models.Arp{
-							PriorityLevel: 8,
-						},
-						PriorityLevel: 8,
-					},
-					SessionAmbr: &models.Ambr{
-						Uplink:   "1000 Kbps",
-						Downlink: "1000 Kbps",
-					},
-				},
-			},
-		},
-	}
-
-	gock.New("http://127.0.0.3:8000/"+factory.UdmSdmUriPrefix+"/imsi-208930000007487").
-		Get("/sm-data").
-		MatchParam("dnn", "internet").
-		Reply(http.StatusOK).
-		JSON(SMSubscriptionData)
-}
-
-func initSMPoliciesPostStubPCF() {
-	smPolicyDecision := models.SmPolicyDecision{
-		SessRules: map[string]*models.SessionRule{
-			"SessRuleId-10": {
-				AuthSessAmbr: &models.Ambr{
-					Uplink:   "1000 Kbps",
-					Downlink: "1000 Kbps",
-				},
-				AuthDefQos: &models.AuthorizedDefaultQos{
-					Var5qi: 9,
-					Arp: &models.Arp{
-						PriorityLevel: 8,
-					},
-					PriorityLevel: 8,
-				},
-				SessRuleId: "SessRuleId-10",
-			},
-		},
-		PolicyCtrlReqTriggers: []models.PolicyControlRequestTrigger{
-			"PLMN_CH", "RES_MO_RE", "AC_TY_CH", "UE_IP_CH", "PS_DA_OFF",
-			"DEF_QOS_CH", "SE_AMBR_CH", "QOS_NOTIF", "RAT_TY_CH",
-		},
-		SuppFeat: "000f",
-	}
-
-	gock.New("http://127.0.0.7:8000/"+factory.PcfSmpolicycontrolUriPrefix).
-		Post("/sm-policies").
-		Reply(http.StatusCreated).
-		AddHeader("Location",
-			"http://127.0.0.7:8000/"+factory.PcfSmpolicycontrolUriPrefix+"/sm-policies/imsi-208930000007487-10").
-		JSON(smPolicyDecision)
-}
-
-func initDiscAMFStubNRF() {
-	searchResult := &models.SearchResult{
-		ValidityPeriod: 100,
-		NfInstances: []models.NfProfile{
-			{
-				NfInstanceId: "smf-unit-testing",
-				NfType:       "AMF",
-				NfStatus:     "REGISTERED",
-				PlmnList: &[]models.PlmnId{
-					{
-						Mcc: "208",
-						Mnc: "93",
-					},
-				},
-				Ipv4Addresses: []string{
-					"127.0.0.18",
-				},
-				AmfInfo: &models.AmfInfo{
-					AmfSetId:    "3f8",
-					AmfRegionId: "ca",
-				},
-				NfServices: &[]models.NfService{
-					{
-						ServiceInstanceId: "0",
-						ServiceName:       "namf-comm",
-						Versions: &[]models.NfServiceVersion{
-							{
-								ApiVersionInUri: "v1",
-								ApiFullVersion:  "1.0.0",
-							},
-						},
-						Scheme:          "http",
-						NfServiceStatus: "REGISTERED",
-						IpEndPoints: &[]models.IpEndPoint{
-							{
-								Ipv4Address: "127.0.0.18",
-								Transport:   "TCP",
-								Port:        8000,
-							},
-						},
-						ApiPrefix: "http://127.0.0.18:8000",
-					},
-				},
-			},
-		},
-	}
-
-	gock.New("http://127.0.0.10:8000/"+factory.NrfDiscUriPrefix).
-		Get("/nf-instances").
-		MatchParam("target-nf-type", "AMF").
-		MatchParam("requester-nf-type", "SMF").
-		Reply(http.StatusOK).
-		JSON(searchResult)
-}
-
-func initStubPFCP() {
-	ctx, cancel := context.WithCancel(context.Background())
-	smf_context.GetSelf().Ctx = ctx
-	smf_context.GetSelf().PFCPCancelFunc = cancel
-
-	udp.Run(pfcp.Dispatch)
-}
-
-func buildPDUSessionEstablishmentRequest(pduSessID uint8, pti uint8, pduType uint8) []byte {
-	msg := nas.NewMessage()
-	msg.GsmMessage = nas.NewGsmMessage()
-	msg.GsmMessage.PDUSessionEstablishmentRequest = nasMessage.NewPDUSessionEstablishmentRequest(0)
-	msg.GsmHeader.SetMessageType(nas.MsgTypePDUSessionEstablishmentRequest)
-	msg.GsmHeader.SetExtendedProtocolDiscriminator(nasMessage.Epd5GSSessionManagementMessage)
-
-	pduEstReq := msg.GsmMessage.PDUSessionEstablishmentRequest
-	// Set GSM Message
-	pduEstReq.SetExtendedProtocolDiscriminator(nasMessage.Epd5GSSessionManagementMessage)
-	pduEstReq.SetPDUSessionID(pduSessID)
-	pduEstReq.SetPTI(pti)
-	pduEstReq.SetMessageType(nas.MsgTypePDUSessionEstablishmentRequest)
-	pduEstReq.PDUSessionType = nasType.NewPDUSessionType(nasMessage.PDUSessionEstablishmentRequestPDUSessionTypeType)
-	pduEstReq.PDUSessionType.SetPDUSessionTypeValue(pduType)
-
-	if b, err := msg.PlainNasEncode(); err != nil {
-		panic(err)
-	} else {
-		return b
-	}
-}
-
-func buildPDUSessionModificationRequest(pduSessID uint8, pti uint8) []byte {
-	msg := nas.NewMessage()
-	msg.GsmMessage = nas.NewGsmMessage()
-	msg.GsmMessage.PDUSessionModificationRequest = nasMessage.NewPDUSessionModificationRequest(0)
-	msg.GsmHeader.SetMessageType(nas.MsgTypePDUSessionModificationRequest)
-	msg.GsmHeader.SetExtendedProtocolDiscriminator(nasMessage.Epd5GSSessionManagementMessage)
-
-	pduModReq := msg.GsmMessage.PDUSessionModificationRequest
-	// Set GSM Message
-	pduModReq.SetExtendedProtocolDiscriminator(nasMessage.Epd5GSSessionManagementMessage)
-	pduModReq.SetPDUSessionID(pduSessID)
-	pduModReq.SetPTI(pti)
-	pduModReq.SetMessageType(nas.MsgTypePDUSessionModificationRequest)
-
-	if b, err := msg.PlainNasEncode(); err != nil {
-		panic(err)
-	} else {
-		return b
-	}
-}
-
-func buildPDUSessionEstablishmentReject(pduSessID uint8, pti uint8, cause uint8) []byte {
-	msg := nas.NewMessage()
-	msg.GsmMessage = nas.NewGsmMessage()
-	msg.GsmMessage.PDUSessionEstablishmentReject = nasMessage.NewPDUSessionEstablishmentReject(0)
-	msg.GsmHeader.SetMessageType(nas.MsgTypePDUSessionEstablishmentReject)
-	msg.GsmHeader.SetExtendedProtocolDiscriminator(nasMessage.Epd5GSSessionManagementMessage)
-
-	pduEstRej := msg.GsmMessage.PDUSessionEstablishmentReject
-	// Set GSM Message
-	pduEstRej.SetExtendedProtocolDiscriminator(nasMessage.Epd5GSSessionManagementMessage)
-	pduEstRej.SetPDUSessionID(pduSessID)
-	pduEstRej.SetPTI(pti)
-	pduEstRej.SetMessageType(nas.MsgTypePDUSessionEstablishmentReject)
-	pduEstRej.Cause5GSM.SetCauseValue(cause)
-
-	if b, err := msg.PlainNasEncode(); err != nil {
-		panic(err)
-	} else {
-		return b
-	}
-}
-
-func TestHandlePDUSessionSMContextCreate(t *testing.T) {
-	// Activate Gock
-	openapi.InterceptH2CClient()
-	defer openapi.RestoreH2CClient()
-	initConfig()
-	initStubPFCP()
-
-	// modify associate setup status
-	allUPFs := smf_context.GetSelf().UserPlaneInformation.UPFs
-	for _, upfNode := range allUPFs {
-		upfNode.UPF.UPFStatus = smf_context.AssociatedSetUpSuccess
-	}
-
-	testCases := []struct {
-		initFuncs       []func()
-		request         models.PostSmContextsRequest
-		paramStr        string
-		resultStr       string
-		responseBody    any
-		expectedHTTPRsp *httpwrapper.Response
-	}{
-		{
-			initFuncs: []func(){initDiscUDMStubNRF, initDiscPCFStubNRF, initSMPoliciesPostStubPCF, initDiscAMFStubNRF},
-			request: models.PostSmContextsRequest{
-				BinaryDataN1SmMessage: buildPDUSessionModificationRequest(10, 1),
-			},
-			paramStr:     "input wrong GSM Message type\n",
-			resultStr:    "PDUSessionSMContextCreate should fail due to wrong GSM type\n",
-			responseBody: &models.PostSmContextsErrorResponse{},
-			expectedHTTPRsp: &httpwrapper.Response{
-				Header: nil,
-				Status: http.StatusForbidden,
-				Body: models.PostSmContextsErrorResponse{
-					JsonData: &models.SmContextCreateError{
-						Error: &Nsmf_PDUSession.N1SmError,
-					},
-				},
-			},
-		},
-		{
-			initFuncs: []func(){
-				initDiscUDMStubNRF, initDiscPCFStubNRF,
-				initGetSMDataStubUDM, initSMPoliciesPostStubPCF, initDiscAMFStubNRF,
-			},
-			request: models.PostSmContextsRequest{
-				JsonData: &models.SmContextCreateData{
-					Supi:         "imsi-208930000007487",
-					Pei:          "imeisv-1110000000000000",
-					Gpsi:         "msisdn-0900000000",
-					PduSessionId: 10,
-					Dnn:          "internet",
-					SNssai: &models.Snssai{
-						Sst: 1,
-						Sd:  "112232",
-					},
-					ServingNfId: "c8d0ee65-f466-48aa-a42f-235ec771cb52",
-					Guami: &models.Guami{
-						PlmnId: &models.PlmnId{
-							Mcc: "208",
-							Mnc: "93",
-						},
-						AmfId: "cafe00",
-					},
-					AnType: "3GPP_ACCESS",
-					ServingNetwork: &models.PlmnId{
-						Mcc: "208",
-						Mnc: "93",
-					},
-				},
-				BinaryDataN1SmMessage: buildPDUSessionEstablishmentRequest(10, 2, nasMessage.PDUSessionTypeIPv6),
-			},
-			paramStr:     "try request the IPv6 PDU session\n",
-			resultStr:    "Reject IPv6 PDU Session and respond error\n",
-			responseBody: &models.PostSmContextsErrorResponse{},
-			expectedHTTPRsp: &httpwrapper.Response{
-				Header: nil,
-				Status: http.StatusForbidden,
-				Body: models.PostSmContextsErrorResponse{
-					JsonData: &models.SmContextCreateError{
-						Error: &models.ProblemDetails{
-							Title:  "Invalid N1 Message",
-							Status: http.StatusForbidden,
-							Detail: "N1 Message Error",
-							Cause:  "N1_SM_ERROR",
-						},
-						N1SmMsg: &models.RefToBinaryData{ContentId: "n1SmMsg"},
-					},
-					BinaryDataN1SmMessage: buildPDUSessionEstablishmentReject(
-						10, 2, nasMessage.Cause5GSMPDUSessionTypeIPv4OnlyAllowed),
-				},
-			},
-		},
-		{
-			initFuncs: []func(){
-				initDiscUDMStubNRF, initDiscPCFStubNRF,
-				initGetSMDataStubUDM, initSMPoliciesPostStubPCF, initDiscAMFStubNRF,
-			},
-			request: models.PostSmContextsRequest{
-				JsonData: &models.SmContextCreateData{
-					Supi:         "imsi-208930000007487",
-					Pei:          "imeisv-1110000000000000",
-					Gpsi:         "msisdn-0900000000",
-					PduSessionId: 10,
-					Dnn:          "internet",
-					SNssai: &models.Snssai{
-						Sst: 1,
-						Sd:  "112232",
-					},
-					ServingNfId: "c8d0ee65-f466-48aa-a42f-235ec771cb52",
-					Guami: &models.Guami{
-						PlmnId: &models.PlmnId{
-							Mcc: "208",
-							Mnc: "93",
-						},
-						AmfId: "cafe00",
-					},
-					AnType: "3GPP_ACCESS",
-					ServingNetwork: &models.PlmnId{
-						Mcc: "208",
-						Mnc: "93",
-					},
-				},
-				BinaryDataN1SmMessage: buildPDUSessionEstablishmentRequest(10, 3, nasMessage.PDUSessionTypeIPv4),
-			},
-			paramStr:     "input correct PostSmContexts Request\n",
-			resultStr:    "PDUSessionSMContextCreate should pass\n",
-			responseBody: &models.PostSmContextsResponse{},
-			expectedHTTPRsp: &httpwrapper.Response{
-				Header: nil,
-				Status: http.StatusCreated,
-				Body: models.PostSmContextsResponse{
-					JsonData: &models.SmContextCreatedData{
-						SNssai: &models.Snssai{
-							Sst: 1,
-							Sd:  "112232",
-						},
-					},
-				},
-			},
-		},
-	}
-
-	// init all stubs for all TCs first to prevent gock race condition
-	for _, tc := range testCases {
-		for _, initFunc := range tc.initFuncs {
-			initFunc()
-		}
-	}
-
-	mockSmf := service.NewMockSmfAppInterface(gomock.NewController(t))
-	consumer, err := consumer.NewConsumer(mockSmf)
-	if err != nil {
-		t.Fatalf("Failed to create consumer: %+v", err)
-	}
-
-	processor, err := processor.NewProcessor(mockSmf)
-	if err != nil {
-		t.Fatalf("Failed to create processor: %+v", err)
-	}
-
-	service.SMF = mockSmf
-
-	mockSmf.EXPECT().Context().Return(smf_context.GetSelf()).AnyTimes()
-	mockSmf.EXPECT().Consumer().Return(consumer).AnyTimes()
-
-	for _, tc := range testCases {
-		t.Run(tc.paramStr, func(t *testing.T) {
-			httpRecorder := httptest.NewRecorder()
-			c, _ := gin.CreateTestContext(httpRecorder)
-
-			processor.HandlePDUSessionSMContextCreate(c, tc.request, nil)
-
-			httpResp := httpRecorder.Result()
-			if errClose := httpResp.Body.Close(); errClose != nil {
-				t.Fatalf("Failed to close response body: %+v", errClose)
-			}
-
-			rawBytes, errReadAll := io.ReadAll(httpResp.Body)
-			if errReadAll != nil {
-				t.Fatalf("Failed to read response body: %+v", errReadAll)
-			}
-
-			err = openapi.Deserialize(tc.responseBody, rawBytes, httpResp.Header.Get("Content-Type"))
-			if err != nil {
-				t.Fatalf("Failed to deserialize response body: %+v", err)
-			}
-
-			respBytes, errMarshal := json.Marshal(tc.responseBody)
-			if errMarshal != nil {
-				t.Fatalf("Failed to marshal actual response body: %+v", errMarshal)
-			}
-
-			expectedBytes, errMarshal := json.Marshal(tc.expectedHTTPRsp.Body)
-			if errMarshal != nil {
-				t.Fatalf("Failed to marshal expected response body: %+v", errMarshal)
-			}
-
-			require.Equal(t, tc.expectedHTTPRsp.Status, httpResp.StatusCode)
-			require.Equal(t, expectedBytes, respBytes)
-
-			// wait for another go-routine to execute following procedure
-			time.Sleep(100 * time.Millisecond)
-
-			createData := tc.request.JsonData
-			if createData != nil {
-				var ref string
-				if ref, err = smf_context.ResolveRef(createData.Supi,
-					createData.PduSessionId); err == nil {
-					smf_context.RemoveSMContext(ref)
-				}
-			}
-		})
-	}
-
-	err = udp.ClosePfcp()
-	require.NoError(t, err)
-}
diff --git a/Application_entity/server/sbi/server.go b/Application_entity/server/sbi/server.go
index 2043897..681bbb3 100644
--- a/Application_entity/server/sbi/server.go
+++ b/Application_entity/server/sbi/server.go
@@ -2,7 +2,9 @@ package sbi
 
 import (
 	"context"
+	"crypto/tls"
 	"fmt"
+	"log"
 	"net/http"
 	"runtime/debug"
 	"sync"
@@ -11,7 +13,6 @@ import (
 	"github.com/gin-gonic/gin"
 
 	"github.com/coranlabs/CORAN_LIB_OPENAPI/models"
-	"github.com/coranlabs/CORAN_LIB_UTIL/httpwrapper"
 	logger_util "github.com/coranlabs/CORAN_LIB_UTIL/logger"
 	"github.com/coranlabs/CORAN_SMF/Application_entity/logger"
 	"github.com/coranlabs/CORAN_SMF/Application_entity/pkg/app"
@@ -20,6 +21,7 @@ import (
 	"github.com/coranlabs/CORAN_SMF/Application_entity/server/sbi/processor"
 	util_oauth "github.com/coranlabs/CORAN_SMF/Application_entity/util/oauth"
 	smf_context "github.com/coranlabs/CORAN_SMF/Messages_handling_entity/context"
+	"github.com/lakshya-chopra/httpwrapper"
 )
 
 const (
@@ -53,9 +55,15 @@ func NewServer(smf ServerSmf, tlsKeyLogPath string) (*Server, error) {
 
 	s.router = newRouter(s)
 
+	server_cert, err1 := tls.LoadX509KeyPair(factory.SmfConfig.GetCertPemPath(), factory.SmfConfig.GetCertKeyPath())
+
+	if err1 != nil {
+		log.Fatal(err1)
+	}
+
 	bindAddr := fmt.Sprintf("%s:%d", s.Context().BindingIPv4, s.Context().SBIPort)
 	var err error
-	if s.httpServer, err = httpwrapper.NewHttp2Server(bindAddr, tlsKeyLogPath, s.router); err != nil {
+	if s.httpServer, err = httpwrapper.NewHttp2Server(bindAddr, tlsKeyLogPath, s.router, server_cert); err != nil {
 		logger.InitLog.Errorf("Initialize HTTP server failed: %v", err)
 		return nil, err
 	}
diff --git a/Dockerfile b/Dockerfile
index f28b485..438b9c6 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,11 +1,38 @@
 #Stage 1
-FROM golang:1.23-alpine AS builder
+FROM golang:1.23-bullseye AS builder
 WORKDIR /smf
 COPY .netrc /root/.netrc
 COPY . /smf
-RUN apk add --no-cache git
+RUN apt install git wget
 RUN go env -w GOPRIVATE=github.com/coranlabs
 RUN go mod download
+
+# RUN git clone https://github.com/lakshya-chopra/go /cloudflare-go
+# WORKDIR /cloudflare-go/src
+# RUN ./make.bash
+
+# ENV GOROOT /cloudflare-go 
+# ENV PATH $GOROOT/bin:$GOPATH/bin:$PATH
+# ENV go /cloudflare-go/bin/go
+
+
+RUN mkdir -p /go-1.23
+RUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \
+    && tar -C /go-1.23 -xzf go1.23.0.linux-amd64.tar.gz
+ENV GOROOT_BOOTSTRAP=/go-1.23/go
+
+
+RUN git clone https://github.com/lakshya-chopra/go /cloudflare-go
+RUN rm -rf /usr/local/go/src/crypto
+RUN rm -rf /usr/local/go/src/vendor
+RUN cp /cloudflare-go/src/crypto -R /usr/local/go/src/crypto
+RUN cp /cloudflare-go/src/vendor -R /usr/local/go/src/vendor
+WORKDIR /usr/local/go/src/
+
+RUN ./make.bash
+
+WORKDIR /smf
+
 RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o smf ./main.go
 
 # Stage 2
diff --git a/go.mod b/go.mod
index d8555dc..fb04663 100644
--- a/go.mod
+++ b/go.mod
@@ -47,6 +47,7 @@ require (
 	github.com/json-iterator/go v1.1.12 // indirect
 	github.com/jtolds/gls v4.20.0+incompatible // indirect
 	github.com/klauspost/cpuid/v2 v2.2.7 // indirect
+	github.com/lakshya-chopra/httpwrapper v0.0.1 // indirect
 	github.com/leodido/go-urn v1.4.0 // indirect
 	github.com/magiconair/properties v1.8.5 // indirect
 	github.com/mattn/go-isatty v0.0.20 // indirect
diff --git a/go.sum b/go.sum
index 275f211..1f5c110 100644
--- a/go.sum
+++ b/go.sum
@@ -236,6 +236,8 @@ github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORN
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
+github.com/lakshya-chopra/httpwrapper v0.0.1 h1:bnb2eYQBsYMX/gUr8uhSNxbjVfK/04EEozx9uA/gnqk=
+github.com/lakshya-chopra/httpwrapper v0.0.1/go.mod h1:zrgSmzr/IuUxKZAzaBELxyf3PgjhNn4gu8ppVbLr4OY=
 github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
 github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
 github.com/magiconair/properties v1.8.5 h1:b6kJs+EmPFMYGkow9GiUyCyOvIwYetYJ3fSaWak/Gls=
-- 
2.43.0

